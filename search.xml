<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[Android Tutorial]]></title>
      <url>/2017/09/23/Android%20Tutorial/</url>
      <content type="html"><![CDATA[<h2 id="Outline"><a href="#Outline" class="headerlink" title="Outline"></a>Outline</h2><hr>
<h2 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h2><hr>
<h2 id="Part-1：开始Android学习之前"><a href="#Part-1：开始Android学习之前" class="headerlink" title="Part 1：开始Android学习之前"></a>Part 1：开始Android学习之前</h2><hr>
<h3 id="1-一些资源"><a href="#1-一些资源" class="headerlink" title="1. 一些资源"></a>1. 一些资源</h3><ul>
<li><strong><a href="https://www.zybuluo.com/coder-pig/note/476982" target="_blank" rel="external">1.1.1 API文档与教程</a></strong> </li>
<li><strong><a href="https://www.zybuluo.com/coder-pig/note/886179" target="_blank" rel="external">1.1.2 开源项目</a></strong></li>
<li><strong><a href="https://www.zybuluo.com/coder-pig/note/886202" target="_blank" rel="external">1.1.3 网络期刊</a></strong></li>
<li><strong><a href="https://www.zybuluo.com/coder-pig/note/886304" target="_blank" rel="external">1.1.4 技术社区</a></strong></li>
<li><strong><a href="https://www.zybuluo.com/coder-pig/note/886313" target="_blank" rel="external">1.1.5 开发资源</a></strong></li>
<li>1.1.6 简书专题</li>
<li>1.1.7 知乎专栏/小专栏</li>
<li>1.1.8 公众号</li>
<li>1.1.9 视频教程</li>
<li>1.1.10 面试相关</li>
<li>1.1.11 优秀APP欣赏</li>
<li>1.1.12 应用推广相关</li>
</ul>
<hr>
<h3 id="2-分布式版本控制系统-——-Git"><a href="#2-分布式版本控制系统-——-Git" class="headerlink" title="2. 分布式版本控制系统 —— Git"></a>2. 分布式版本控制系统 —— Git</h3><p><a href="https://www.zybuluo.com/coder-pig/note/581320" target="_blank" rel="external">小猪的Git使用总结</a> 附上目录：</p>
<blockquote>
<ul>
<li><strong>安装配置与文档</strong><ul>
<li>1.下载安装</li>
<li>2.文档教程相关</li>
</ul>
</li>
<li><strong>概念</strong><ul>
<li>1.Git的四个组成部分</li>
<li>2.文件的几个状态</li>
<li>3.Git与SVN版本版本控制存储差异</li>
<li>4.每次Commit时仓库中的数据结构</li>
</ul>
</li>
<li><strong>本地操作命令</strong><ul>
<li>1.相关配置【git config】</li>
<li>2.获取帮助【git help】</li>
<li>3.创建本地仓库【git init】</li>
<li>4.添加文件到暂存区/文件跟踪标记【git add】</li>
<li>5.让Git不Tracked特定文件【.gitignore文件配置】</li>
<li>6.将暂存区内容提交到本地仓库【git commit】</li>
<li>7.查看工作区与缓存区的状态【git status】</li>
<li>8.差异对比(内容变化)【git diff】</li>
<li>9.查看历史提交记录【git log】</li>
<li>10.查看某行代码是谁写的【git blame】</li>
<li>11.设置Git命令别名【git config –global alias】</li>
<li>12.为重要的commit打标签【git tag】</li>
<li>13.Git命令自动补全【输命令的时候按两次tab键】</li>
</ul>
</li>
<li><strong>文件回复/版本回退</strong><ul>
<li>1.文件恢复(未commit)【git checkout】</li>
<li>2.文件恢复(已add未commit)【git reset HEAD】</li>
<li>3.版本回退(已commit)【git reset –hard】</li>
<li>4.查看输入指令记录【git reflog】</li>
<li>5.撤销某次提交【git revert】</li>
<li>6.查看某次提交修改内容【git show】</li>
<li>7.查看某个分支的版本号【git rev-parse】</li>
<li>8.找回丢失对象的最后一点希望【git fsck】</li>
</ul>
</li>
<li><strong>本地分支</strong><ul>
<li>1.分支概念</li>
<li>2.创建其他分支的原因</li>
<li>3.一个最简单实用的分支管理策略</li>
<li>4.分支创建与切换【git branch】</li>
<li>5.分支的合并【git merge】 VS 【git rebase】</li>
<li>6.解决合并冲突</li>
<li>7.删除分支</li>
<li>8.恢复误删分支</li>
<li>9.切换分支时保存未commit的更改【git stash】</li>
<li>10.分支重命名</li>
</ul>
</li>
<li><strong>远程仓库与远程分支</strong><ul>
<li>1.远程仓库简述</li>
<li>2.推送本地仓库到远程仓库【git push】</li>
<li>3.克隆远程仓库【git clone】</li>
<li>4.同步远程仓库更新【git fetch】VS 【git pull】</li>
<li>5.推送本地分支到远程仓库</li>
<li>6.查看远程分支</li>
<li>7.拉取远程分支到本地仓库</li>
<li>8.删除远程分支</li>
<li>9.重命名远程分支</li>
<li>10.为项目添加SSH Key免去提交输入账号密码的麻烦</li>
<li>附1：Github客户端</li>
<li>附2：删除Git仓库</li>
<li>附3：为开源项目贡献代码</li>
</ul>
</li>
<li><strong>Git工作流</strong><ul>
<li>1.集中式工作流</li>
<li>2.功能分支工作流</li>
<li>3.Gitflow工作流</li>
<li>4.Forking工作流</li>
<li>5.Pull Request工作流</li>
</ul>
</li>
<li><strong>查缺补漏</strong><ul>
<li>1.巨好用的Git图形化工具SourceTree</li>
<li>2.把提交的commit从一个分支放到另一个分支【git cherry-pick】</li>
</ul>
</li>
</ul>
</blockquote>
<hr>
<h3 id="3-Android开发工具-——-Android-Studio"><a href="#3-Android开发工具-——-Android-Studio" class="headerlink" title="3. Android开发工具 —— Android Studio"></a>3. Android开发工具 —— Android Studio</h3><ul>
<li><a href="https://www.zybuluo.com/coder-pig/note/886909" target="_blank" rel="external">1.3.1 AS 简介、下载安装与配置</a></li>
<li><a href="https://www.zybuluo.com/coder-pig/note/887045" target="_blank" rel="external">1.3.2 Gradle编译提速</a></li>
<li><a href="https://www.zybuluo.com/coder-pig/note/891078" target="_blank" rel="external">1.3.3 Android Stuido与SDK更新相关</a></li>
<li><a href="https://www.zybuluo.com/coder-pig/note/891134" target="_blank" rel="external">1.3.4 设置相关</a></li>
<li><a href="https://www.zybuluo.com/coder-pig/note/891318" target="_blank" rel="external">1.3.5 新建运行第一个项目</a></li>
<li>1.3.6 快捷键大全与改建</li>
<li>1.3.7 编码技巧</li>
<li>1.3.8 调试技巧</li>
<li>1.3.9 Git版本控制</li>
<li>1.3.10 Gradle</li>
<li>1.3.11 常用插件</li>
<li>1.3.12 其他</li>
</ul>
<hr>
<h3 id="4-反编译工具"><a href="#4-反编译工具" class="headerlink" title="4.反编译工具"></a>4.反编译工具</h3><p>PS：AS已经支持直接打开查看APK了，</p>
<ul>
<li>1.4.1 ApkTool + dex2jar + jd-gui</li>
<li>1.4.2 Procyon，Jadx和AndroidDecompiler</li>
<li>1.4.3 官方反编译工具：ClassyShark</li>
<li>1.4.4 Android Killer</li>
</ul>
<hr>
<h3 id="5-抓包"><a href="#5-抓包" class="headerlink" title="5.抓包"></a>5.抓包</h3><ul>
<li>1.5.1 Charles</li>
<li>1.5.2 Fiddler</li>
</ul>
<hr>
<h3 id="6-辅助工具"><a href="#6-辅助工具" class="headerlink" title="6.辅助工具"></a>6.辅助工具</h3><hr>
<h3 id="7-命令行"><a href="#7-命令行" class="headerlink" title="7.命令行"></a>7.命令行</h3><ul>
<li>1.7.1 adb</li>
<li><a href="https://www.zybuluo.com/coder-pig/note/886797" target="_blank" rel="external">1.7.2 WM (修改手机分辨率与屏幕密度)</a></li>
</ul>
<hr>
<h3 id="8-编码规范"><a href="#8-编码规范" class="headerlink" title="8.编码规范"></a>8.编码规范</h3><ul>
<li>Android与Java编码规范</li>
</ul>
<hr>
<h3 id="9-Android常识与概念相关"><a href="#9-Android常识与概念相关" class="headerlink" title="9.Android常识与概念相关"></a>9.Android常识与概念相关</h3><ul>
<li>1.9.1 背景相关与系统架构</li>
<li>1.9.2 Android 5.1 源码目录结构与源码阅读相关</li>
<li>1.9.3 Android系统的启动流程浅析</li>
<li>1.9.4 Android应用的安装流程浅析</li>
<li>1.9.5 Android应用的启动流程浅析</li>
</ul>
<hr>
<h2 id="Part-2-Android-UI"><a href="#Part-2-Android-UI" class="headerlink" title="Part 2 Android UI"></a>Part 2 Android UI</h2><h3 id="2-1-布局"><a href="#2-1-布局" class="headerlink" title="2.1 布局"></a>2.1 布局</h3><h3 id="2-2-基本UI控件"><a href="#2-2-基本UI控件" class="headerlink" title="2.2 基本UI控件"></a>2.2 基本UI控件</h3><h3 id="2-3-v4包中的UI控件"><a href="#2-3-v4包中的UI控件" class="headerlink" title="2.3 v4包中的UI控件"></a>2.3 v4包中的UI控件</h3><h3 id="2-4-v7包中的UI控件"><a href="#2-4-v7包中的UI控件" class="headerlink" title="2.4 v7包中的UI控件"></a>2.4 v7包中的UI控件</h3><h3 id="2-5-Material-Design概念与Design库"><a href="#2-5-Material-Design概念与Design库" class="headerlink" title="2.5 Material Design概念与Design库"></a>2.5 Material Design概念与Design库</h3><h3 id="2-6-常用第三方UI库"><a href="#2-6-常用第三方UI库" class="headerlink" title="2.6 常用第三方UI库"></a>2.6 常用第三方UI库</h3><h3 id="2-7-Android事件分发机制"><a href="#2-7-Android事件分发机制" class="headerlink" title="2.7 Android事件分发机制"></a>2.7 Android事件分发机制</h3><h3 id="2-8-Drawable"><a href="#2-8-Drawable" class="headerlink" title="2.8 Drawable"></a>2.8 Drawable</h3><h3 id="2-9-Vector矢量图"><a href="#2-9-Vector矢量图" class="headerlink" title="2.9 Vector矢量图"></a>2.9 Vector矢量图</h3><h3 id="2-10-Bitmap与图片加载"><a href="#2-10-Bitmap与图片加载" class="headerlink" title="2.10 Bitmap与图片加载"></a>2.10 Bitmap与图片加载</h3><h3 id="2-11-Android动画"><a href="#2-11-Android动画" class="headerlink" title="2.11 Android动画"></a>2.11 Android动画</h3><h3 id="2-12-自定义View专题"><a href="#2-12-自定义View专题" class="headerlink" title="2.12 自定义View专题"></a>2.12 自定义View专题</h3><h3 id="2-13-屏幕适配"><a href="#2-13-屏幕适配" class="headerlink" title="2.13 屏幕适配"></a>2.13 屏幕适配</h3><ul>
<li><a href="https://www.zybuluo.com/coder-pig/note/892456" target="_blank" rel="external">2.13.1 单位与相关名词</a></li>
<li>2.13.2 各种屏幕适配套路</li>
</ul>
<hr>
<h2 id="Part-3-四大组件，Intent与Fragment"><a href="#Part-3-四大组件，Intent与Fragment" class="headerlink" title="Part 3 四大组件，Intent与Fragment"></a>Part 3 四大组件，Intent与Fragment</h2><h3 id="3-1-Activity-活动"><a href="#3-1-Activity-活动" class="headerlink" title="3.1 Activity(活动)"></a>3.1 Activity(活动)</h3><h3 id="3-2-Service-服务"><a href="#3-2-Service-服务" class="headerlink" title="3.2 Service(服务)"></a>3.2 Service(服务)</h3><h3 id="3-3-BroadcastReceiver-广播"><a href="#3-3-BroadcastReceiver-广播" class="headerlink" title="3.3 BroadcastReceiver(广播)"></a>3.3 BroadcastReceiver(广播)</h3><h3 id="3-4-ContentProvider-内容提供者"><a href="#3-4-ContentProvider-内容提供者" class="headerlink" title="3.4 ContentProvider(内容提供者)"></a>3.4 ContentProvider(内容提供者)</h3><h3 id="3-5-Intent-意图"><a href="#3-5-Intent-意图" class="headerlink" title="3.5 Intent(意图)"></a>3.5 Intent(意图)</h3><h3 id="3-6-Fragment-碎片"><a href="#3-6-Fragment-碎片" class="headerlink" title="3.6 Fragment(碎片)"></a>3.6 Fragment(碎片)</h3><hr>
<h2 id="Part-4-数据存储"><a href="#Part-4-数据存储" class="headerlink" title="Part 4 数据存储"></a>Part 4 数据存储</h2><h3 id="4-1-文件存储读写"><a href="#4-1-文件存储读写" class="headerlink" title="4.1 文件存储读写"></a>4.1 文件存储读写</h3><h3 id="4-2-保存用户偏好参数"><a href="#4-2-保存用户偏好参数" class="headerlink" title="4.2 保存用户偏好参数"></a>4.2 保存用户偏好参数</h3><h3 id="4-3-数据库"><a href="#4-3-数据库" class="headerlink" title="4.3 数据库"></a>4.3 数据库</h3><hr>
<h2 id="Part-5-网络编程"><a href="#Part-5-网络编程" class="headerlink" title="Part 5 网络编程"></a>Part 5 网络编程</h2><h3 id="5-1-XML数据解析"><a href="#5-1-XML数据解析" class="headerlink" title="5.1 XML数据解析"></a>5.1 XML数据解析</h3><h3 id="5-2-Json数据解析"><a href="#5-2-Json数据解析" class="headerlink" title="5.2 Json数据解析"></a>5.2 Json数据解析</h3><h3 id="5-3-Protocol-Buffers数据解析"><a href="#5-3-Protocol-Buffers数据解析" class="headerlink" title="5.3 Protocol Buffers数据解析"></a>5.3 Protocol Buffers数据解析</h3><h3 id="5-4-HTTP相关概念"><a href="#5-4-HTTP相关概念" class="headerlink" title="5.4 HTTP相关概念"></a>5.4 HTTP相关概念</h3><h3 id="5-5-Android中的Http请求"><a href="#5-5-Android中的Http请求" class="headerlink" title="5.5 Android中的Http请求"></a>5.5 Android中的Http请求</h3><h3 id="5-6-网络请求相关开源库"><a href="#5-6-网络请求相关开源库" class="headerlink" title="5.6 网络请求相关开源库"></a>5.6 网络请求相关开源库</h3><h3 id="5-7-Https"><a href="#5-7-Https" class="headerlink" title="5.7 Https"></a>5.7 Https</h3><h3 id="5-8-Socket网络编程"><a href="#5-8-Socket网络编程" class="headerlink" title="5.8 Socket网络编程"></a>5.8 Socket网络编程</h3><h3 id="5-9-WebService调用"><a href="#5-9-WebService调用" class="headerlink" title="5.9 WebService调用"></a>5.9 WebService调用</h3><hr>
<h2 id="Part-6-项目架构"><a href="#Part-6-项目架构" class="headerlink" title="Part 6 项目架构"></a>Part 6 项目架构</h2><ul>
<li>6.1 MVC</li>
<li>6.2 MVP</li>
<li>6.3 MVVM</li>
<li>6.4 MVPVM</li>
<li>6.5 CleanArchitecture</li>
<li>6.6 AOP 面向切面编程</li>
<li>6.7 模块化</li>
</ul>
<hr>
<h2 id="Part-7-混淆打包，持续集成，应用分发，插件化，APK差分升级"><a href="#Part-7-混淆打包，持续集成，应用分发，插件化，APK差分升级" class="headerlink" title="Part 7 混淆打包，持续集成，应用分发，插件化，APK差分升级"></a>Part 7 混淆打包，持续集成，应用分发，插件化，APK差分升级</h2><hr>
<h2 id="Part-8-性能调优"><a href="#Part-8-性能调优" class="headerlink" title="Part 8 性能调优"></a>Part 8 性能调优</h2><ul>
<li>8.1 内存检测与优化</li>
<li>8.2 流畅度检测与优化</li>
<li>8.3 网络优化</li>
<li>8.4 APK安装包瘦身</li>
</ul>
<hr>
<h2 id="Part-9-Android-MultMedia-多媒体"><a href="#Part-9-Android-MultMedia-多媒体" class="headerlink" title="Part 9 Android MultMedia(多媒体)"></a>Part 9 Android MultMedia(多媒体)</h2><hr>
<h2 id="Part-10-相关服务与系统参数，杂项"><a href="#Part-10-相关服务与系统参数，杂项" class="headerlink" title="Part 10 相关服务与系统参数，杂项"></a>Part 10 相关服务与系统参数，杂项</h2><hr>
<h2 id="Part-11-地图"><a href="#Part-11-地图" class="headerlink" title="Part 11 地图"></a>Part 11 地图</h2><hr>
<h2 id="Part-12-支付"><a href="#Part-12-支付" class="headerlink" title="Part 12 支付"></a>Part 12 支付</h2><hr>
<h2 id="Part-13-推送"><a href="#Part-13-推送" class="headerlink" title="Part 13 推送"></a>Part 13 推送</h2><hr>
<h2 id="Part-14-即时通讯"><a href="#Part-14-即时通讯" class="headerlink" title="Part 14 即时通讯"></a>Part 14 即时通讯</h2><hr>
<h2 id="Part-15-单元测试"><a href="#Part-15-单元测试" class="headerlink" title="Part 15 单元测试"></a>Part 15 单元测试</h2><hr>
<h2 id="Part-16-自动化测试"><a href="#Part-16-自动化测试" class="headerlink" title="Part 16 自动化测试"></a>Part 16 自动化测试</h2><hr>
<h2 id="Part-17-安全相关"><a href="#Part-17-安全相关" class="headerlink" title="Part 17 安全相关"></a>Part 17 安全相关</h2><hr>
<h2 id="Part-18-蓝牙"><a href="#Part-18-蓝牙" class="headerlink" title="Part 18 蓝牙"></a>Part 18 蓝牙</h2><hr>
<h2 id="Part-19-Wifi相关"><a href="#Part-19-Wifi相关" class="headerlink" title="Part 19 Wifi相关"></a>Part 19 Wifi相关</h2><hr>
<h2 id="Part-20-Hybrid-App"><a href="#Part-20-Hybrid-App" class="headerlink" title="Part 20 Hybrid App"></a>Part 20 Hybrid App</h2><ul>
<li>18.1 前端基础</li>
<li>18.2 PhoneGap</li>
<li>18.3 ionic</li>
<li>18.4 React Native</li>
</ul>
<hr>
<h2 id="Part-21：OpenGL与OpenCV"><a href="#Part-21：OpenGL与OpenCV" class="headerlink" title="Part 21：OpenGL与OpenCV"></a>Part 21：OpenGL与OpenCV</h2><hr>
<h2 id="Part-22：逆向工程"><a href="#Part-22：逆向工程" class="headerlink" title="Part 22：逆向工程"></a>Part 22：逆向工程</h2><hr>
<h2 id="Part-23：Framework层开发"><a href="#Part-23：Framework层开发" class="headerlink" title="Part 23：Framework层开发"></a>Part 23：Framework层开发</h2><hr>
<h2 id="拆库系列"><a href="#拆库系列" class="headerlink" title="拆库系列"></a>拆库系列</h2><h3 id="拆自定义View"><a href="#拆自定义View" class="headerlink" title="拆自定义View"></a>拆自定义View</h3><h3 id="拆框架"><a href="#拆框架" class="headerlink" title="拆框架"></a>拆框架</h3><hr>
<h2 id="项目实战"><a href="#项目实战" class="headerlink" title="项目实战"></a>项目实战</h2><hr>
]]></content>
      
        <categories>
            
            <category> Android </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Tutorial </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Ubuntu 14.04 For Android 使用记录]]></title>
      <url>/2017/09/13/Ubuntu%2014.04%20For%20Android%20%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
      <content type="html"><![CDATA[<h2 id="软件安装"><a href="#软件安装" class="headerlink" title="软件安装"></a>软件安装</h2><hr>
<h3 id="1-Chrome浏览器"><a href="#1-Chrome浏览器" class="headerlink" title="1.Chrome浏览器"></a>1.Chrome浏览器</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb</div><div class="line">apt-get -f install</div><div class="line">dpkg -i google-chrome-stable_current_amd64.deb</div></pre></td></tr></table></figure>
<p>接着到电脑的： <strong>/usr/share/applications</strong> 找到chrome图标，然后<br>拖至左侧任务栏即可。</p>
<hr>
<h3 id="2-搜狗输入法安装："><a href="#2-搜狗输入法安装：" class="headerlink" title="2.搜狗输入法安装："></a>2.搜狗输入法安装：</h3><p><strong>Step 1</strong>：安装<strong>fcitx输入法框架</strong>，一般默认使用IBus输入框架，查看是否安装fcitx方法如下：右上角打开系统设置-&gt;语言支持查看，没有找到fcitx的话，那么命令行键入：<strong>sudo apt install fcitx</strong> 进行安装。</p>
<p><img src="http://static.zybuluo.com/coder-pig/yhlxvjquwlgbmjo2kwqgwgij/snapshot1.png" alt="snapshot1.png-43kB"></p>
<p>安装后，打开系统设置-&gt;语言支持，选择使用fcitx输入法框架，然后注销，进来输入法就会生效.</p>
<p><strong>Step 2</strong>：到：<a href="http://pinyin.sogou.com/linux/" target="_blank" rel="external">http://pinyin.sogou.com/linux/</a> 下载搜狗输入法，下载完后双击deb包<br>进行安装，安装完后同样需要注销一波，重新进入就应该能看到Sogou输入法的图标了。</p>
<p><strong>如果还没看到Sogou输入法</strong>的话，右键右上角的输入法小键盘，打开设置，然后点”+”按钮，找到Sogou Pinyin然后添加，就可以了。</p>
<p>PS：<strong>别手多去卸载IBus</strong>！！！！！！！</p>
<hr>
<h3 id="3-Git"><a href="#3-Git" class="headerlink" title="3.Git"></a>3.Git</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install git</div></pre></td></tr></table></figure>
<hr>
<h3 id="4-Vim"><a href="#4-Vim" class="headerlink" title="4.Vim"></a>4.Vim</h3><p>默认用的是vi，可能不怎么好操作，可以自行安装vim</p>
<figure class="highlight sh"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install vim-gtk</div></pre></td></tr></table></figure>
<p>输入”Y”，回车，等待安装完成</p>
<hr>
<h3 id="5-JDK"><a href="#5-JDK" class="headerlink" title="5.JDK"></a>5.JDK</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">sudo apt-add-repository ppa:webupd8team/java</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install oracle-java8-set-default</div></pre></td></tr></table></figure>
<p>用这种方法装的jdk无需配置环境变量～</p>
<hr>
<h3 id="6-shell-zsh"><a href="#6-shell-zsh" class="headerlink" title="6.shell zsh"></a>6.shell zsh</h3><p>如果你不喜欢自带呆板的bash可以试试功能更为强大的<strong>zsh</strong><br>可以先打开Terminal键入：<strong>cat /etc/shells</strong>  查看当前安装的shell有哪些<br>也可以键入：<strong>echo $SHELL/bin/bash</strong>  查看当前正在运行的是哪个版本的shell</p>
<p>开始安装zsh：</p>
<ul>
<li>1.键入：<strong>sudo apt-get install zsh git wget</strong>  安装zsh git wget</li>
<li><p>2.获取并自动安装oh-my-zsh，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">wget --no-check-certificate https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh</div></pre></td></tr></table></figure>
</li>
<li><p>3.替换bash为zsh：  <strong>chsh -s /bin/zsh</strong></p>
</li>
<li>4.接着键入：<strong>sudo reboot</strong>重启电脑，有东西没保存的最好保存好再键入这个指令！</li>
<li>5.重启后，打开Terminal就可以看到效果了</li>
</ul>
<p>PS：安装完zsh后，在home目录下会有一个名为.zshrc的隐藏文件，可以根据个人喜好配置相关参数更多可见：<a href="http://blog.csdn.net/iloveyin/article/details/49522449" target="_blank" rel="external">终极 Shell——ZSH</a>，想换不同的主题：<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/themes" target="_blank" rel="external">github官方主题</a></p>
<hr>
<h3 id="7-Unity-Tweak-Tool"><a href="#7-Unity-Tweak-Tool" class="headerlink" title="7.Unity Tweak Tool"></a>7.Unity Tweak Tool</h3><p>字体安装的话直接双击ttf文件进行安装即可，如果你想设置<br>电脑的字体可以使用<strong>Unity Tweak Tool</strong>，自带的商店就有~</p>
<hr>
<h3 id="8-WineQQ-国际版"><a href="#8-WineQQ-国际版" class="headerlink" title="8.WineQQ 国际版"></a>8.WineQQ 国际版</h3><p>PS：不用看了，界面体验肯定是不如win和mac上的QQ的，日常聊天<br>和文件传输还是凑合的，另外，QQ接收文件的目录是(红色是你的QQ号)：</p>
<p><img src="http://static.zybuluo.com/coder-pig/tveeg8x9wrkwimiqnpayo9nn/0858E17B2C75C05BB9B021144E9DAD35.jpg" alt=""></p>
<p><strong>下载与安装的步骤如下</strong>：</p>
<ul>
<li><strong>1.下载WineQQ：</strong><a href="http://www.ubuntukylin.com/applications/showimg.php?lang=cn&amp;id=23" target="_blank" rel="external">http://www.ubuntukylin.com/applications/showimg.php?lang=cn&amp;id=23</a></li>
<li><strong>2.安装依赖库：</strong><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install  libgtk2.0-0:i386</div></pre></td></tr></table></figure>
</li>
</ul>
<p>如果是64位，还需安装<strong>ia32-libs</strong>，而在Ubuntu14.04中该软件包已经被其他版本替代，<br>这里选择安装lib32ncurses5：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install lib32ncurses5</div></pre></td></tr></table></figure></p>
<ul>
<li><strong>3.解压安装WineQQ</strong><br>解压下载好的WineQQ，然后打开Terminal，cd到解压目录下，先安装<br><strong>wine-qqintl_0.1.3-2_i386.deb</strong>，键入<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i wine-qqintl_0.1.3-2_i386.deb</div></pre></td></tr></table></figure>
</li>
</ul>
<p>安装过程中可能会出现：<strong>dpkg:error processing package wine-qqintl(–install)</strong>…<br>的问题，大概意思是lib未配置，键入:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install -f</div></pre></td></tr></table></figure></p>
<p>然后再执行一次安装命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i wine-qqintl_0.1.3-2_i386.deb</div></pre></td></tr></table></figure></p>
<p>装完这个后，把另外两个deb包也装上：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -i ttf-wqy-microhei_0.2.0-beta-2_all.deb</div><div class="line">sudo dpkg -i fonts-wqy-microhei_0.2.0-beta-2_all.deb</div></pre></td></tr></table></figure></p>
<ul>
<li><p><strong>4.检测wineQQ是否安装成功</strong><br>键入下述命令，如果能看到QQ版本号说明安装成功</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo dpkg -l|grep qq</div></pre></td></tr></table></figure>
</li>
<li><p><strong>5.找到QQ图标，拖动到左侧快捷启动栏</strong><br>来到 <strong>/usr/share/applications/</strong> ，把QQ图标拖到左侧快捷启动栏，下次直接点击<br>图标就可以打开了。</p>
</li>
</ul>
<hr>
<h3 id="9-Android-Studio"><a href="#9-Android-Studio" class="headerlink" title="9.Android Studio"></a>9.Android Studio</h3><p>方法有两种，建议后者：</p>
<p><strong>一键安装</strong>：走一波下面的命令即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">sudo apt-add-repository ppa:paolorotolo/android-studio</div><div class="line">sudo apt-get update</div><div class="line">sudo apt-get install android-studio</div><div class="line">sudo apt-get install libc6:i386 libncurses5:i386 libstdc++6:i386 lib32z1</div></pre></td></tr></table></figure>
<p><strong>下载安装</strong>：到Android Developer下载或者到AndroidDevTool下载(无需梯子)，<br>下载复制到自己喜欢的路径解压；解压后，打开Terminal，cd到解压目录的bin目录下，<br>键入: <strong>./studio.sh</strong> 即可运行Android Studio，接着各种选择，安装即可。<br>觉得走命令繁琐，可以向下翻如何<strong>设置快捷启动方式</strong>~</p>
<hr>
<h2 id="配置相关"><a href="#配置相关" class="headerlink" title="配置相关"></a>配置相关</h2><p>PS：这里用的vim可以换成其他的编辑工具打开，比如gedit</p>
<hr>
<h3 id="1-host配置"><a href="#1-host配置" class="headerlink" title="1.host配置"></a>1.host配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">cd ../../etc</div><div class="line">sudo vim hosts</div></pre></td></tr></table></figure>
<p>接着进入vim编辑界面，按insert键进入编辑模式，对hosts进行编辑，编辑完毕，按esc键， 退出编辑模式，键入 <strong>:wq</strong> 保存更改即可.</p>
<hr>
<h3 id="2-Android-Studio安装时报错-unable-to-run-mksdcard-sdk-tool"><a href="#2-Android-Studio安装时报错-unable-to-run-mksdcard-sdk-tool" class="headerlink" title="2.Android Studio安装时报错:unable to run mksdcard sdk tool"></a>2.Android Studio安装时报错:unable to run mksdcard sdk tool</h3><p>键入下述命令添加以来，然后重新安装即可</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo apt-get install lib32z1 lib32ncurses5 lib32bz2-1.0 lib32stdc++6</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-Android环境变量配置"><a href="#3-Android环境变量配置" class="headerlink" title="3.Android环境变量配置"></a>3.Android环境变量配置</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /etc/profile</div></pre></td></tr></table></figure>
<p>然后把下面的ANDROID_HOME的路径改成你Android Studio的实际路径</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">export ANDROID_HOME=&quot;$HOME/Library/Android/sdk&quot;</div><div class="line">export PATH=$PATH:$ANDROID_HOME/platform-tools</div><div class="line">export PATH=$PATH:$ANDROID_HOME/tools</div></pre></td></tr></table></figure>
<p>修改后保存，wq，接着键入下述指令，可以让环境变量在当前的shell有效：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">source /etc/profile</div></pre></td></tr></table></figure>
<p>接着你可以键入:adb，看看是不是出来一大串的东西，来验证环境变量配置是否<br>生效，接着重启电脑，接着在其他的shell也会生效了！</p>
<hr>
<h3 id="4-设置快捷启动方式"><a href="#4-设置快捷启动方式" class="headerlink" title="4.设置快捷启动方式"></a>4.设置快捷启动方式</h3><p>这里以Android Studio为例，如果不设置快捷方式我们每次都要先cd到Android<br>Studio 的目录下，键入<strong>./studio.sh</strong>才能启动Android Studio，非常不方便，<br>我们可以键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sudo vim /usr/share/applications/Studio.desktop</div></pre></td></tr></table></figure>
<p>接着设置与Android Studio相关的东西：<strong>Exec</strong>代表<strong>运作脚本</strong>，<strong>Icon</strong>表示<strong>图标</strong><br><strong>Terminal</strong>：<strong>是否显示shell</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">[Desktop Entry]</div><div class="line">Name = Studio</div><div class="line">comment= android studio</div><div class="line">Exec=/opt/android-studio/bin/studio.sh</div><div class="line">Icon=/opt/android-studio/bin/studio.png</div><div class="line">Terminal=false</div><div class="line">Type=Application</div></pre></td></tr></table></figure>
<p>保存退出后，如果配置无误的话，来到usr/share/applications目录下，<br>找到Studio图标，拖到左边任务栏即可。其他的sh也可以这样玩，比如<br>我就给我的ssr.sh 配置了一个滑稽的图标。啧啧！</p>
<hr>
<h3 id="5-生成SSH-KEY"><a href="#5-生成SSH-KEY" class="headerlink" title="5.生成SSH KEY"></a>5.生成SSH KEY</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ssh-keygen -t rsa -C &quot;xxx@xx.com&quot;</div></pre></td></tr></table></figure>
<p>-t:指定秘钥类型，默认rsa<br>-C:提供一个注释，不写默认是主机名<br>接着依次是文件名，密码，重复密码，这里没特别需要直接回车就好。<br>接着键入:<strong>cd ~/.ssh</strong> 来到ssh目录下，接着vim打开id_rsa.pub，复制SSH KEY贴<br>到Git服务器的SSH Key即可。</p>
<hr>
<h3 id="6-adb服务抽风，不启动"><a href="#6-adb服务抽风，不启动" class="headerlink" title="6.adb服务抽风，不启动"></a>6.adb服务抽风，不启动</h3><p>如题，找不到设备，terminal键入adb devices会出现xxx no permission的状况<br>cd 来到adb所在的目录下，依次键入</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">sudo ./adb kill-server</div><div class="line">sudo ./adb start-server</div></pre></td></tr></table></figure>
<p>有时可能需要两次，一次不行试多次，直到出现：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">daemon not running. starting it now on port 5037 *</div><div class="line">daemon started successfully *</div></pre></td></tr></table></figure>
<p>然后键入：adb devices，此时就可以看到设备就处于device状态了～<br>有时可能会遇到治标不治本的情况，就可能是要配置端口什么的了，<br>可以自行搜索。</p>
<hr>
<h3 id="7-adb-push的问题"><a href="#7-adb-push的问题" class="headerlink" title="7.adb push的问题"></a>7.adb push的问题</h3><p>和adb install不同，push是直接塞进去，和pull拉取对应，这里我们是把应<br>用装到系统应用目录下，所以用的push，不需要进入adb shell！直接键入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb push xxx yyy</div></pre></td></tr></table></figure>
<p>就可以了,’xxx’或者xxx的写法都可以，前面的xxx是<strong>本机路径</strong>，后面的yyy是<strong>手机路径</strong><br><strong>系统应用</strong>是塞到到<strong>system/priv-app</strong>目录下的！有时可能会抽风push不进去东西，<br>显示 <strong>Read-only file system</strong>，这个时候你需要先用下述指令挂载设备后才能push：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">adb shell mount -o remount rw /system</div></pre></td></tr></table></figure>
<hr>
<h3 id="8-SSR全局代理配置"><a href="#8-SSR全局代理配置" class="headerlink" title="8.SSR全局代理配置"></a>8.SSR全局代理配置</h3><p>SS作者被请喝茶了，想用上SSR，不过Ubuntu上关于全局代理配置的都是SS的，<br>自己东翻翻西翻翻，瞎折腾了一天，终于我的Ubuntu14.04也能够用SSR了，<br>过程曲折，不不过所幸还是弄好了，谷歌无压力，不过发现全局代理后，<br>部分软件会用不了，比如QQ信息会发送不了，暂时还没解决，先Mark下：</p>
<p>直接去Github搜<strong>shadowsocksr-libev</strong>，找到这个项目，然后git clone 到本地，对源码进行编译：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">git clone https://github.com/shadowsocksr-backup/shadowsocksr-libev.git</div><div class="line"></div><div class="line">cd shadowsocks-libev</div><div class="line"></div><div class="line">sudo apt-get install --no-install-recommends build-essential autoconf libtool libssl-dev \</div><div class="line">    gawk debhelper dh-systemd init-system-helpers pkg-config asciidoc xmlto apg libpcre3-dev</div><div class="line"></div><div class="line">dpkg-buildpackage -b -us -uc -i</div><div class="line"></div><div class="line">cd ..</div><div class="line"></div><div class="line">sudo dpkg -i shadowsocks-libev*.deb</div></pre></td></tr></table></figure>
<p>如无意外应该是安装完成了，然后可以直接键入下述命令执行，建议是保存成.sh文件，不用每次都敲！</p>
<p>如果是弄成sh文件的话，可以使用bash xx.sh来执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ss-local  -s 服务器地址 -p 服务器端口 -l 本地端口(一般是1080) -b 本地ip(一般是127.0.0.1) -k ss密码 -m 加密方式</div></pre></td></tr></table></figure>
<p>执行后，命令行会出现这样的，到此只能说配置无误，能否生效还要设下全局代理：</p>
<p><img src="http://static.zybuluo.com/coder-pig/gclkorxhwt0oixnmfvvtktur/C3BA8802FC6CA161360F318D6F8C3922.jpg" alt=""></p>
<p>依次打开<strong>设置</strong>-&gt;<strong>网络</strong>-&gt;<strong>网络代理</strong>，如图设置即可：</p>
<p><img src="http://static.zybuluo.com/coder-pig/rj9rs0z4hxkjhdhmkutb0eow/%E6%9C%AA%E5%91%BD%E5%90%8D.jpg" alt=""></p>
<p>最后浏览器打开google，如果正常打开，说明配置正常，且代理服务器可用，<br>如果出现下面这样的一串：</p>
<p><img src="http://static.zybuluo.com/coder-pig/bdf3ebc7agq5n6hp3rthiejp/DFFA02A4E2A57B38049A34C19829CD90.jpg" alt=""></p>
<p>可能是你代理服务器GG了。</p>
<hr>
<p><strong>更多待续</strong>…</p>
<hr>
<p>最近更新: 2017.9.13</p>
]]></content>
      
        <categories>
            
            <category> Ubuntu </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Ubuntu </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[小猪的Git使用总结]]></title>
      <url>/2017/09/13/%E5%B0%8F%E7%8C%AA%E7%9A%84Git%E4%BD%BF%E7%94%A8%E6%80%BB%E7%BB%93/</url>
      <content type="html"><![CDATA[<p><img src="http://static.zybuluo.com/coder-pig/8tuua13m0eqnrybzo9x4tai5/image_1bp083nbp1n7a9ad162a1v3s1lcr9.png" alt=""></p>
<hr>
<p><strong>目录</strong></p>
<p>[TOC]</p>
<hr>
<p><strong>概述</strong>：</p>
<p>接触Git也些年头了，对于Git的使用也算是小有所成，想着便于自己<br>日后回顾，也便于他人查阅学习，遂有此文，相信看完此文你的Git<br>使用会更进一步，谢谢~</p>
<p><strong>在线版</strong>（排版更佳，不定期更新）：<a href="https://www.zybuluo.com/coder-pig/note/581320" target="_blank" rel="external">https://www.zybuluo.com/coder-pig/note/581320</a><br>本文不收取任何费用，欢迎转载，请勿将本文用于商业用途，<br>想了解更多内容可见：<a href="http://blog.csdn.net/coder_pig" target="_blank" rel="external">http://blog.csdn.net/coder_pig</a><br>如果本文对你学习Git有一定帮助，不妨小额打赏下小猪，你的鼓励是我不断写<br>博客的动力， 万分感谢~ </p>
<p>微信：<img src="http://static.zybuluo.com/coder-pig/7c8xkb5u2r0czk55p7ci1uhz/image_1b9v5l6dv3q514ps1bvqq2r1qc39.png" alt=""> 支付宝：<img src="http://static.zybuluo.com/coder-pig/i0gqqc78ofamn8jv9u9bj5k9/image_1b9v5m5rd1feeq8u1mc9khn16bqm.png" alt=""></p>
<p>如有什么疑问欢迎加群：421858269 反馈，谢谢~</p>
<hr>
<h2 id="安装配置与文档"><a href="#安装配置与文档" class="headerlink" title="安装配置与文档"></a>安装配置与文档</h2><hr>
<h3 id="1-下载安装"><a href="#1-下载安装" class="headerlink" title="1.下载安装"></a>1.下载安装</h3><ul>
<li><strong>Windows系统</strong>：到 <a href="https://git-scm.com/download/win" target="_blank" rel="external">Git For Windows</a> 或 <a href="https://git-for-windows.github.io/" target="_blank" rel="external">git-for-windows.github.io</a>下载，傻瓜式下一步。</li>
<li><strong>Linux系统</strong>：到 <a href="http://git-scm.com/download/linux" target="_blank" rel="external">Download for Linux and Unix</a> 下载，如果是Ubuntu的话，直接Terminal键入：<br><strong>sudo apt-get install git</strong> 安装。</li>
<li><strong>Mac系统</strong>：到 <a href="http://git-scm.com/download/mac" target="_blank" rel="external">Installing on Mac</a> 下载，不过新系统貌似默认已经带有Git了，另外如果安装了<br>Homebrew的话可以直接命令行键入：<strong>brew install git</strong> 进行安装。</li>
</ul>
<h3 id="2-文档教程相关"><a href="#2-文档教程相关" class="headerlink" title="2.文档教程相关"></a>2.文档教程相关</h3><ul>
<li><strong>Pro Git(官方)</strong>：<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="external">https://git-scm.com/book/zh/v2</a></li>
<li><strong>Pro Git中文版(oschina)</strong>：<a href="http://git.oschina.net/progit/index.html" target="_blank" rel="external">http://git.oschina.net/progit/index.html</a></li>
<li><strong>廖雪峰的Git教程</strong>：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></li>
<li><strong>猴子都看得懂的Git入门</strong>：<a href="http://www.backlogtool.com/git-guide/cn/" target="_blank" rel="external">http://www.backlogtool.com/git-guide/cn/</a></li>
<li><strong>Git Community Book 中文</strong>版：<a href="http://gitbook.liuhui998.com/index.html" target="_blank" rel="external">http://gitbook.liuhui998.com/index.html</a></li>
<li><strong>沉浸式学Git</strong>：<a href="http://igit.linuxtoy.org/contents.html" target="_blank" rel="external">http://igit.linuxtoy.org/contents.html</a></li>
<li><strong>.gitignore 文件模板</strong>：<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a></li>
<li><strong>git log –pretty 输出格式定制</strong>：<a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History" target="_blank" rel="external">https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History</a></li>
</ul>
<hr>
<h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><hr>
<h3 id="1-Git的四个组成部分"><a href="#1-Git的四个组成部分" class="headerlink" title="1.Git的四个组成部分"></a>1.Git的四个组成部分</h3><p><img src="http://static.zybuluo.com/coder-pig/get64rj0pj9n68icaogq9mzn/75062926.png" alt=""></p>
<h3 id="2-文件的几个状态"><a href="#2-文件的几个状态" class="headerlink" title="2.文件的几个状态"></a>2.文件的几个状态</h3><p><strong>按大类划分</strong>，分为两种状态：<strong>Tracked</strong>(已跟踪)和<strong>Untracked</strong>(未跟踪)，<br>依据是：<strong>该文件是否已加入版本控制</strong>？</p>
<p>流程简述：</p>
<blockquote>
<p>假设某个项目已加入版本控制系统</p>
<ul>
<li>1.新建一个文件，该文件处于 <strong>Untracked</strong> 状态；</li>
<li>2.通过<strong>git add</strong>命令添加到缓存区，此时文件处于<strong>Tracked</strong>状态又或者说<br>此时这个文件已经被版本控制系统所跟踪，而且他处于<strong>Staged(暂存)</strong>状态；</li>
<li>3.通过<strong>git commit</strong>命令把暂存区的文件提交提交到本地仓库，此时文件<br>处于<strong>Unmodified(未修改)</strong>状态；</li>
<li>4.此时如果去编辑这个文件，文件又会变成<strong>Modified(修改)</strong>状态；</li>
</ul>
</blockquote>
<h3 id="3-Git与SVN版本版本控制存储差异"><a href="#3-Git与SVN版本版本控制存储差异" class="headerlink" title="3.Git与SVN版本版本控制存储差异"></a>3.Git与SVN版本版本控制存储差异</h3><p>Git关心的是：<strong>文件整体</strong>是否发生变化，而SVN关心的是：<strong>文件内容</strong>的具体差异！<br>SVN每次提交记录的是：<strong>哪些文件进行了修改，以及修改了哪些行的哪些内容</strong></p>
<p><img src="http://static.zybuluo.com/coder-pig/7j7fex6ch4qzhmkkv0dwny1z/image_1b3n9jndv14fk1r1c1sbsclf1ot19.png" alt=""></p>
<p>如图：版本2中记录的是文件A和C的变化，而版本3中记录文件C的变化，以此类推；<br>而Git中，并不保存这些前后变化的差异数据，而是保证整个缓存区中的所有文件，<br>又叫快照，<strong>有变化的文件保存</strong>，<strong>没变化的文件不保存</strong>，<strong>而是</strong>对上一次的保存的快照<br>做一个<strong>链接</strong>！因为这种不同的保存方式，Git切换分支的速度比SVN快很多！</p>
<p><img src="http://static.zybuluo.com/coder-pig/mwp8d0uv9592n4qvdr95mgqh/image_1b3n9k2jt1npgkk11tmkp1o18vom.png" alt=""></p>
<p>&nbsp;</p>
<h3 id="4-每次Commit时仓库中的数据结构"><a href="#4-每次Commit时仓库中的数据结构" class="headerlink" title="4.每次Commit时仓库中的数据结构"></a>4.每次Commit时仓库中的数据结构</h3><p>分为四个对象：</p>
<p><strong>blob对象</strong>：存放文件数据；<br><strong>tree对象</strong>：目录，内容为blob对象的指针或其他tree对象的指针<br><strong>commit对象</strong>：快照，包含指向前一次提交对象的指针，commit相关的信<br>通过索引找到文件快照。<br><strong>tag对象</strong>：一种特殊的commit对象，一般对某次重要的commit加TAG，以示重要(方便找)</p>
<p><img src="http://static.zybuluo.com/coder-pig/tnrou2ko873bpu0bbqfgs3bh/image_1b3n9nobjcfp1f6b1tb71k1hp7u13.png" alt=""></p>
<hr>
<h2 id="本地操作命令"><a href="#本地操作命令" class="headerlink" title="本地操作命令"></a>本地操作命令</h2><hr>
<h3 id="1-相关配置【git-config】"><a href="#1-相关配置【git-config】" class="headerlink" title="1.相关配置【git config】"></a>1.相关配置【git config】</h3><p>区分<strong>global</strong> 和 <strong>local</strong>，前者代表 <strong>全局设置</strong>，就是设置了在整个系统中，<br>所有的带Git版本管理的项目都是这样的配置；后者代表 <strong>本地设置</strong> 即在某个项目<br>中<strong>独立的设置</strong>，后者优先级高于前者。比如全局设置的用户名是”Coder-pig”，本地<br>设置的是”Jay”，commit的时候author就是Jay而不是Coder-pig。<br>除了通过命令行修改，还可以直接修改对应文件：</p>
<p><strong>全局配置文件：etc/gitconfig</strong> (Mac下是隐藏文件，<strong>用户/.gitconfig</strong>)<br><strong>本地配置文件：当前仓库/.git/config</strong></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"># 安装完Git后第一件要做的事，设置用户信息(global可换成local在单独项目生效)：</div><div class="line">git config --global user.name &quot;用户名&quot; # 设置用户名</div><div class="line">git config --global user.email &quot;用户邮箱&quot;   #设置邮箱</div><div class="line">git config --global user.name   # 查看用户名是否配置成功</div><div class="line">git config --global user.email   # 查看邮箱是否配置</div><div class="line"></div><div class="line"># 其他查看配置相关</div><div class="line">git config --global --list  # 查看全局设置相关参数列表</div><div class="line">git config --local --list # 查看本地设置相关参数列表</div><div class="line">git config --system --list # 查看系统配置参数列表</div><div class="line">git config --list  # 查看所有Git的配置(全局+本地+系统)</div></pre></td></tr></table></figure>
<hr>
<h3 id="2-获取帮助【git-help】"><a href="#2-获取帮助【git-help】" class="headerlink" title="2.获取帮助【git help】"></a>2.获取帮助【git help】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git help 命令   # 如：git help init</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-创建本地仓库【git-init】"><a href="#3-创建本地仓库【git-init】" class="headerlink" title="3.创建本地仓库【git init】"></a>3.创建本地仓库【git init】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git init 仓库名 # 创建一个新的带Git仓库的项目</div><div class="line">git init # 为已存在的项目生成一个Git仓库</div></pre></td></tr></table></figure>
<hr>
<h3 id="4-添加文件到暂存区-文件跟踪标记【git-add】"><a href="#4-添加文件到暂存区-文件跟踪标记【git-add】" class="headerlink" title="4.添加文件到暂存区/文件跟踪标记【git add】"></a>4.添加文件到暂存区/文件跟踪标记【git add】</h3><p>可以使用<strong>git add 文件名</strong>，将工作空间的文件添加到暂存区，或批量添加文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">git add 文件名 # 将工作区的某个文件添加到暂存区   </div><div class="line">git add -u # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，不处理untracked的文件</div><div class="line">git add -A # 添加所有被tracked文件中被修改或删除的文件信息到暂存区，包括untracked的文件</div><div class="line">git add . # 将当前工作区的所有文件都加入暂存区</div><div class="line">git add -i # 进入交互界面模式，按需添加文件到缓存区</div></pre></td></tr></table></figure>
<p>附：交互界面模式示例</p>
<p><img src="http://static.zybuluo.com/coder-pig/0eus2t7231x0ca767hqtltsm/image_1b2ruorse1r09mc71qav17v1u719.png" alt=""></p>
<p>上图流程：</p>
<blockquote>
<p>1.先在GitForTest的文件夹里创建了两个文件<br>2.键入git add -i，进入后，键入4，选择添加untracked的文件<br>3.他给我们列出了untracked的文件，然后我们根据序号来添加文件<br>4.输入?会弹出相关提示，然后直接回车，结束选择！<br>5.然后再次输入git add -i，输入4，可以看到已不存在untacked的文件了！</p>
</blockquote>
<hr>
<h3 id="5-让Git不Tracked特定文件【-gitignore文件配置】"><a href="#5-让Git不Tracked特定文件【-gitignore文件配置】" class="headerlink" title="5.让Git不Tracked特定文件【.gitignore文件配置】"></a>5.让Git不Tracked特定文件【.gitignore文件配置】</h3><p>将未tracked的文件添加到缓存区后，Git就会开始跟踪这个文件了！<br>对于一些比如：<strong>自动生成的文件</strong>，<strong>日志</strong>，<strong>临时编译文件等</strong>，就<br>没必要进行跟踪了，这个时候可以编写<strong>.gitignore文件</strong>，在里面<br>把不需要跟踪的文件或文件夹都写上，git就不会对这些文件进行跟踪！<br>另外<strong>.gitignore文件与.git文件夹在同级目录下</strong>！</p>
<p>如果不想自己写，可以直接到：<a href="https://github.com/github/gitignore" target="_blank" rel="external">https://github.com/github/gitignore</a> 复制粘贴！<br>也可以自行编写，支持简化了的正则表达式(规范与示例模板摘自：<a href="http://www.jianshu.com/p/f4cd5f2d1a5f" target="_blank" rel="external">Git王者超神之路</a>)</p>
<blockquote>
<ul>
<li><strong>*</strong> ： 匹配零个或多个任意字符</li>
<li><strong>[abc]</strong>：只匹配括号内中的任意一个字符</li>
<li><strong>[0-9]</strong>：- 代表范围，匹配0-9之间的任何字符</li>
<li><strong>?</strong>：匹配任意一个字符</li>
<li><strong>**</strong>：匹配任意的中间目录，例如a/**/z可以匹配:a/z,a/b/z,a/b/c/z等</li>
</ul>
</blockquote>
<p><strong>示例模板</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"># 忽略所有以 .c结尾的文件</div><div class="line">*.c</div><div class="line"> </div><div class="line"># 但是 stream.c 会被git追踪</div><div class="line">!stream.c</div><div class="line"> </div><div class="line"># 只忽略当前文件夹下的TODO文件, 不包括其他文件夹下的TODO例如: subdir/TODO</div><div class="line">/TODO</div><div class="line"> </div><div class="line"># 忽略所有在build文件夹下的文件</div><div class="line">build/</div><div class="line"> </div><div class="line"># 忽略 doc/notes.txt, 但不包括多层下.txt例如: doc/server/arch.txt</div><div class="line">doc/*.txt</div><div class="line"> </div><div class="line"># 忽略所有在doc目录下的.pdf文件</div><div class="line">doc/**/*.pdf</div></pre></td></tr></table></figure>
<p>！！！<strong>特别要注意一点</strong>！！！：</p>
<p>配置.gitignore只对那些<strong>没有添加到版本控制系统</strong>的文件生效(<strong>未Tracked的文件</strong>)！</p>
<p>举个例子：</p>
<p>有A，B两个文件，你先把他两个add了，然后在.gitignore文件中<br>配置了不跟踪这两个文件，但是你会发现根本不会生效。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git add A</div><div class="line">git add B</div><div class="line"># 配置不跟踪A和B</div><div class="line">git add .gitignore</div></pre></td></tr></table></figure>
<p>所以，最好的做法就是在项目刚开始的时候，先添加.gitignore文件。<br>当然，即使是发生了，还是有解决方法的，可以键入下述命令清除标<br>记状态，然后先添加.gitignore，再添加文件即可：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rm -r --cached . # 清除版本控制标记，.代表所有文件，也可指定具体文件</div></pre></td></tr></table></figure>
<p>还有，如果你用的是IDEA的编辑器的话，可以下一个<strong>.ignore</strong>的插件，可以手动<br>直接勾选不需要跟踪的文件。</p>
<hr>
<h3 id="6-将暂存区内容提交到本地仓库【git-commit】"><a href="#6-将暂存区内容提交到本地仓库【git-commit】" class="headerlink" title="6.将暂存区内容提交到本地仓库【git commit】"></a>6.将暂存区内容提交到本地仓库【git commit】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git commit -m &quot;提交说明&quot; # 将暂存区内容提交到本地仓库</div><div class="line">git commit -a -m &quot;提交说明&quot; # 跳过缓存区操作，直接把工作区内容提交到本地仓库</div></pre></td></tr></table></figure>
<p>如果不加<strong>-m “提交说明”</strong>，git会让用你让默认编辑器(如vi)来编写提交说明，<br>可能有些朋友用不惯vi，要么别漏掉<strong>-m “提交说明”</strong>，要么自己设置编译器：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global core.edit 喜欢的编辑器</div></pre></td></tr></table></figure>
<p>除此之外，有时可能需要修改上次提交的内容，比如修改提交说明，或者修改文件等：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"># 合并暂存区和最近的一次commit，生成新的commit并替换掉老的</div><div class="line"># 如果缓存区没内容，利用amend可以修改上次commit的提交说明</div><div class="line"># 注：因为amend后生成的commit是一个全新的commit，旧的会被</div><div class="line"># 删除，所以别在公共的commit上使用amend！切记！！！</div><div class="line"></div><div class="line">git commit --amend </div><div class="line">git commit --amend --no-edit # 沿用上次commit的提交说明</div></pre></td></tr></table></figure>
<hr>
<h3 id="7-查看工作区与缓存区的状态【git-status】"><a href="#7-查看工作区与缓存区的状态【git-status】" class="headerlink" title="7.查看工作区与缓存区的状态【git status】"></a>7.查看工作区与缓存区的状态【git status】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git status # 查看工作区与暂存区的当前情况</div><div class="line">git status -s # 让结果以更简短的形式输出</div></pre></td></tr></table></figure>
<hr>
<h3 id="8-差异对比-内容变化-【git-diff】"><a href="#8-差异对比-内容变化-【git-diff】" class="headerlink" title="8.差异对比(内容变化)【git diff】"></a>8.差异对比(内容变化)【git diff】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">git diff # 工作区与缓存区的差异</div><div class="line">git diff 分支名 #工作区与某分支的差异，远程分支这样写：remotes/origin/分支名</div><div class="line">git diff HEAD  # 工作区与HEAD指针指向的内容差异</div><div class="line">git diff 提交id 文件路径 # 工作区某文件当前版本与历史版本的差异</div><div class="line">git diff --stage # 工作区文件与上次提交的差异(1.6 版本前用 --cached)</div><div class="line">git diff 版本TAG # 查看从某个版本后都改动内容</div><div class="line">git diff 分支A 分支B # 比较从分支A和分支B的差异(也支持比较两个TAG)</div><div class="line">git diff 分支A...分支B # 比较两分支在分开后各自的改动</div><div class="line"></div><div class="line"># 另外：如果只想统计哪些文件被改动，多少行被改动，可以添加 --stat 参数</div></pre></td></tr></table></figure>
<hr>
<h3 id="9-查看历史提交记录【git-log】"><a href="#9-查看历史提交记录【git-log】" class="headerlink" title="9.查看历史提交记录【git log】"></a>9.查看历史提交记录【git log】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">git log # 查看所有commit记录(SHA-A校验和，作者名称，邮箱，提交时间，提交说明)</div><div class="line">git log -p -次数 # 查看最近多少次的提交记录</div><div class="line">git log --stat # 简略显示每次提交的内容更改</div><div class="line">git log --name-only # 仅显示已修改的文件清单</div><div class="line">git log --name-status # 显示新增，修改，删除的文件清单</div><div class="line">git log --oneline # 让提交记录以精简的一行输出</div><div class="line">git log –graph –all --online # 图形展示分支的合并历史</div><div class="line">git log --author=作者  # 查询作者的提交记录(和grep同时使用要加一个--all--match参数)</div><div class="line">git log --grep=过滤信息 # 列出提交信息中包含过滤信息的提交记录</div><div class="line">git log -S查询内容 # 和--grep类似，S和查询内容间没有空格</div><div class="line">git log fileName # 查看某文件的修改记录，找背锅专用</div></pre></td></tr></table></figure>
<p>除此之外，还可以通过 <strong>–pretty</strong> 对提交信息进行定制，比如：</p>
<p><img src="http://static.zybuluo.com/coder-pig/erwuyq2ridqfxqxg83bmy0yv/image_1b2tje1l163i1gkq1qj39k1pis13.png" alt=""></p>
<p>更多规则与定制如下(摘自：<a href="http://www.jianshu.com/p/f4cd5f2d1a5f" target="_blank" rel="external">Git王者超神之路</a>)，或参见：<a href="https://git-scm.com/book/en/v2/Git-Basics-Viewing-the-Commit-History" target="_blank" rel="external">Viewing the Commit History</a> ：</p>
<p>format对应的<strong>常用占位符</strong>：(注：作者是指最后一次修改文件的人，提交者是提交该文件的人)</p>
<table>
<thead>
<tr>
<th style="text-align:center">占位符</th>
<th style="text-align:center">说明</th>
<th style="text-align:center">占位符</th>
<th style="text-align:center">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>%H</strong></td>
<td style="text-align:center">提交对象（commit）的完整哈希字串</td>
<td style="text-align:center"><strong>%h</strong></td>
<td style="text-align:center">提交对象的简短哈希字串</td>
</tr>
<tr>
<td style="text-align:center"><strong>%T</strong></td>
<td style="text-align:center">树对象（tree）的完整哈希字串</td>
<td style="text-align:center"><strong>%t</strong></td>
<td style="text-align:center">树对象的简短哈希字串</td>
</tr>
<tr>
<td style="text-align:center"><strong>%P</strong></td>
<td style="text-align:center">父对象（parent）的完整哈希字串</td>
<td style="text-align:center"><strong>%p</strong></td>
<td style="text-align:center">父对象的简短哈希字串</td>
</tr>
<tr>
<td style="text-align:center"><strong>%an</strong></td>
<td style="text-align:center">作者（author）的名字</td>
<td style="text-align:center"><strong>%ae</strong></td>
<td style="text-align:center">作者的电子邮件地址</td>
</tr>
<tr>
<td style="text-align:center"><strong>%ad</strong></td>
<td style="text-align:center">作者修订日期（可以用 –date= 选项定制格式）</td>
<td style="text-align:center"><strong>%ar</strong></td>
<td style="text-align:center">按多久以前的方式显示</td>
</tr>
<tr>
<td style="text-align:center"><strong>%cn</strong></td>
<td style="text-align:center">提交者(committer)的名字</td>
<td style="text-align:center"><strong>%ce</strong></td>
<td style="text-align:center">提交者的电子邮件地址</td>
</tr>
<tr>
<td style="text-align:center"><strong>%cd</strong></td>
<td style="text-align:center">提交日期</td>
<td style="text-align:center"><strong>%cr</strong></td>
<td style="text-align:center">提交日期，按多久以前的方式显示</td>
</tr>
<tr>
<td style="text-align:center"><strong>%s</strong></td>
<td style="text-align:center">提交说明</td>
</tr>
</tbody>
</table>
<p>一些其他操作：</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">-<strong>p</strong></td>
<td style="text-align:left">按补丁格式显示每个更新之间的差异</td>
</tr>
<tr>
<td style="text-align:center">–<strong>stat</strong></td>
<td style="text-align:left">显示每次更新的文件修改统计信息(行数)</td>
</tr>
<tr>
<td style="text-align:center">–<strong>shortstat</strong></td>
<td style="text-align:left">只显示 –stat 中最后的行数修改添加移除统计</td>
</tr>
<tr>
<td style="text-align:center">–<strong>name-only</strong></td>
<td style="text-align:left">仅在提交信息后显示已修改的文件清单</td>
</tr>
<tr>
<td style="text-align:center">–<strong>name-status</strong></td>
<td style="text-align:left">显示新增、修改、删除的文件清单</td>
</tr>
<tr>
<td style="text-align:center">–<strong>abbrev-commit</strong></td>
<td style="text-align:left">仅显示 SHA-1 的前几个字符，而非所有的 40 个字符</td>
</tr>
<tr>
<td style="text-align:center">–<strong>relative-date</strong></td>
<td style="text-align:left">使用较短的相对时间显示（比如，“2 weeks ago”）</td>
</tr>
<tr>
<td style="text-align:center">–<strong>graph</strong></td>
<td style="text-align:left">显示 ASCII 图形表示的分支合并历史</td>
</tr>
<tr>
<td style="text-align:center">–<strong>pretty</strong></td>
<td style="text-align:left">格式定制，可选选项有：oneline，short，full，Fullerton和format(后跟指定格式)</td>
</tr>
</tbody>
</table>
<p>还有一些限制log输出的选项</p>
<table>
<thead>
<tr>
<th style="text-align:center">选项</th>
<th style="text-align:left">说明</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center"><strong>-(n)</strong></td>
<td style="text-align:left">仅显示最近的 n 条提交</td>
</tr>
<tr>
<td style="text-align:center">–<strong>since</strong>, –<strong>after</strong></td>
<td style="text-align:left">仅显示指定时间之后的提交。</td>
</tr>
<tr>
<td style="text-align:center">–<strong>until</strong>, –<strong>before</strong></td>
<td style="text-align:left">仅显示指定时间之前的提交。</td>
</tr>
<tr>
<td style="text-align:center">–<strong>author</strong></td>
<td style="text-align:left">仅显示指定作者相关的提交。</td>
</tr>
<tr>
<td style="text-align:center">–<strong>committer</strong></td>
<td style="text-align:left">仅显示指定提交者相关的提交。</td>
</tr>
<tr>
<td style="text-align:center">–<strong>grep</strong></td>
<td style="text-align:left">仅显示含指定关键字的提交</td>
</tr>
<tr>
<td style="text-align:center">-<strong>S</strong></td>
<td style="text-align:left">仅显示添加或移除了某个关键字的提交</td>
</tr>
</tbody>
</table>
<hr>
<h3 id="10-查看某行代码是谁写的【git-blame】"><a href="#10-查看某行代码是谁写的【git-blame】" class="headerlink" title="10.查看某行代码是谁写的【git blame】"></a>10.查看某行代码是谁写的【git blame】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git blame 文件名 # 查看某文件的每一行代码的作者，最新commit和提交时间</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/1fstjj2py4hfr4fg8tyqobtf/image_1b65m003a17db186k1175aoj1m5pg.png" alt=""></p>
<p>Tip：</p>
<blockquote>
<p>如果你用的IDEA系列的编译器，右键行号，选择Annotate也可以实现同样的效果</p>
</blockquote>
<p><img src="http://static.zybuluo.com/coder-pig/0phxg774f30hj2ad3a4y6six/image_1bp0rfk3s60k2g51cm61tuk1r5j2v.png" alt=""></p>
<hr>
<h3 id="11-设置Git命令别名【git-config-–global-alias】"><a href="#11-设置Git命令别名【git-config-–global-alias】" class="headerlink" title="11.设置Git命令别名【git config –global alias】"></a>11.设置Git命令别名【git config –global alias】</h3><p>可以为常见的命令起个简单的别名，就不用每次都敲完整命令，比如可以设置：<br>status为st，checkout为co ; commit为ci ; branch为br等</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git config --global alias.st status</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/492djzbw6jfzwuuv7zpbqc8l/image_1b3s94ol71792d8a1cc7g4p1i4l9.png" alt=""></p>
<hr>
<h3 id="12-为重要的commit打标签【git-tag】"><a href="#12-为重要的commit打标签【git-tag】" class="headerlink" title="12.为重要的commit打标签【git tag】"></a>12.为重要的commit打标签【git tag】</h3><p>对于某些提交，我们可以为它打上Tag，表示这次提交很重要，<br>比如为一些正式发布大版本的commit，打上TAG，当某个版本<br>出问题了，通过TAG可以快速找到此次提交，拿到SHA1值，再<br>去查找问题，比起一个个commit看，省事很多！</p>
<p>Git标签分两种：<strong>轻量标签</strong> 和 <strong>附加标签</strong><br>前者只是在提交上加个Tag，指向提交的Hash值；<br>而后者还会保存打标签者的信息，时间和附加信息；</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git tag 标记内容 # 轻量标签</div><div class="line">git tag -a 标记内容 -m &quot;附加信息&quot; # 附加标签</div></pre></td></tr></table></figure>
<p>如果想为之前的某次commit打TAG的话，可以先找出SHA1值，设置调下述命令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -a 标记内容 版本id # 比如：git tag -a v1.1 bcfed96</div></pre></td></tr></table></figure>
<p>默认情况，git push不会把标签推送TAG到远程仓库，如果想推送到服务器，可以：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">git push origin 标记内容 # 推送某标签到</div><div class="line"></div><div class="line"># 删除所有本地仓库中不存在的TAG：</div><div class="line">git push origin --tags</div></pre></td></tr></table></figure>
<p>另外，可以在新建分支的时候也加上TAG</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git checkout -b 分支名 标记内容</div></pre></td></tr></table></figure>
<p>还可以用show命令查看标签对应的信息</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show 标记内容</div></pre></td></tr></table></figure>
<p>如果你想删除本地Tag：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git tag -d 标记内容</div></pre></td></tr></table></figure>
<p>如果是删除远程Tag：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin --delete tag 标记内容</div></pre></td></tr></table></figure>
<hr>
<h3 id="15-Git命令自动补全【输命令的时候按两次tab键】"><a href="#15-Git命令自动补全【输命令的时候按两次tab键】" class="headerlink" title="15.Git命令自动补全【输命令的时候按两次tab键】"></a>15.Git命令自动补全【输命令的时候按两次tab键】</h3><hr>
<h2 id="文件回复-版本回退"><a href="#文件回复-版本回退" class="headerlink" title="文件回复/版本回退"></a>文件回复/版本回退</h2><hr>
<h3 id="1-文件恢复-未commit-【git-checkout】"><a href="#1-文件恢复-未commit-【git-checkout】" class="headerlink" title="1.文件恢复(未commit)【git checkout】"></a>1.文件恢复(未commit)【git checkout】</h3><p>如果在工作区直接删除被Git Tracked的文件，暂存区中还会存在该文件，<br>此时键入：git status，会是这样：</p>
<p><img src="http://static.zybuluo.com/coder-pig/s6he4sgzbc60ksd6476rae7a/image_1b2tjsr024hdmmrds89bfvnp1g.png" alt=""></p>
<p>Git告诉你工作区的文件被删除了，你可以 <strong>删掉暂存区里的文件</strong>或 <strong>恢复被删文件</strong> </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"># 删除暂存区中的文件：</div><div class="line">git rm 文件名</div><div class="line">git commit -m &quot;提交说明&quot;</div><div class="line"></div><div class="line"># 误删恢复文件</div><div class="line">git checkout -- 文件名</div><div class="line"></div><div class="line"># 另外注意：git checkout会抛弃当前工作区的更改!!!不可恢复！！！务必小心！！！</div></pre></td></tr></table></figure>
<hr>
<h3 id="2-文件恢复-已add未commit-【git-reset-HEAD】"><a href="#2-文件恢复-已add未commit-【git-reset-HEAD】" class="headerlink" title="2.文件恢复(已add未commit)【git reset HEAD】"></a>2.文件恢复(已add未commit)【git reset HEAD】</h3><p>如果更改后add到了暂存区，想恢复原状，下述指令可以让文件恢复原状：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git reset HEAD 文件名   </div><div class="line">git checkout 文件名</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-版本回退-已commit-【git-reset-–hard】"><a href="#3-版本回退-已commit-【git-reset-–hard】" class="headerlink" title="3.版本回退(已commit)【git reset –hard】"></a>3.版本回退(已commit)【git reset –hard】</h3><p>文件已经commit了，想恢复成上次commit的版本或者上上次，可以：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git reset HEAD^ # 恢复成上次提交的版本</div><div class="line">git reset HEAD^^ # 恢复成上上次提交的版本，就是多个^，以此类推或用~次数</div><div class="line">git reset --hard 版本号 # git log查看到的SHA1值，取前七位即可，根据版本号回退</div></pre></td></tr></table></figure>
<p>reset命令其实就是：<strong>重置HEAD指针，让其指向另一个commit</strong><br>而这个动作可能会对工作区与缓存区造成影响，举个例子</p>
<blockquote>
<ul>
<li><strong>本来的分支线</strong>：- A - B - C (HEAD, master)</li>
<li><strong>git reset B后</strong>：- A - B (HEAD, master)<br>解释：看不到C了，但是他还是存在的，可以通过git reset C版本号找回，前提是<br>C没有被Git当做垃圾处理掉(一般是30天)。</li>
</ul>
</blockquote>
<p><strong>reset三个可选参数解析</strong>：</p>
<blockquote>
<ul>
<li><strong>–soft</strong>：只是改变HEAD指针指向，缓存区和工作区不变；</li>
<li><strong>–mixed</strong>：修改HEAD指针指向，暂存区内容丢失，工作区不变；</li>
<li><strong>–hard</strong>：修改HEAD指针指向，暂存区内容丢失，工作区恢复以前状态；</li>
</ul>
</blockquote>
<hr>
<h3 id="4-查看输入指令记录【git-reflog】"><a href="#4-查看输入指令记录【git-reflog】" class="headerlink" title="4.查看输入指令记录【git reflog】"></a>4.查看输入指令记录【git reflog】</h3><p>Git会记住你输入的每个Git指令，比如上面的git reset 切换成一个旧的<br>commit，然后git log后发现新提交的记录没了，想切换回新的那次commit，<br>可以先调git reflog 获取新commit的SHA1码，然后git reset 回去。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git reflog</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/aw54fps0zgrdj9r745sa0xh5/image_1b2tkrj6h1oan8gt1l3lkd7g532a.png" alt=""></p>
<p><strong>注意</strong>：这个指令记录不会永久保存！Git会定时清理用不到的对象！！！</p>
<hr>
<h3 id="5-撤销某次提交【git-revert】"><a href="#5-撤销某次提交【git-revert】" class="headerlink" title="5.撤销某次提交【git revert】"></a>5.撤销某次提交【git revert】</h3><p>有时可能我们想撤销某次提交所做的更改，可以使用<strong>revert</strong>命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git revert HEAD # 撤销最近的一个提交</div><div class="line">git revert 版本号 # 撤销某次commit</div></pre></td></tr></table></figure>
<p>不是真的把提交给撤销了，而是生成一个新的提交来<strong>覆盖</strong>旧的提交，被撤销的提交<br>和新的<strong>提交记录都会保存</strong>！！！不信你再调一次revert HEAD 会发现被撤销的更改<br>又变回来了，另外，每次revert后，都需要发起新的commit！<br>简单点说<strong>，撤销的只是文件变化，提交记录依旧是存在的</strong>！</p>
<p><img src="http://static.zybuluo.com/coder-pig/d7r2cltk3q30n8v3kv78cqg9/1.jpg" alt=""></p>
<hr>
<h3 id="6-查看某次提交修改内容【git-show】"><a href="#6-查看某次提交修改内容【git-show】" class="headerlink" title="6.查看某次提交修改内容【git show】"></a>6.查看某次提交修改内容【git show】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git show 提交id # 查看某次commit的修改内容</div></pre></td></tr></table></figure>
<h3 id="7-查看某个分支的版本号【git-rev-parse】"><a href="#7-查看某个分支的版本号【git-rev-parse】" class="headerlink" title="7.查看某个分支的版本号【git rev-parse】"></a>7.查看某个分支的版本号【git rev-parse】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rev-parse 分支名 # 查看分支commit的版本号，可以写HEAD</div></pre></td></tr></table></figure>
<h3 id="8-找回丢失对象的最后一点希望【git-fsck】"><a href="#8-找回丢失对象的最后一点希望【git-fsck】" class="headerlink" title="8.找回丢失对象的最后一点希望【git fsck】"></a>8.找回丢失对象的最后一点希望【git fsck】</h3><p>因为你的某次误操作导致commit丢失，如果git reflog都找不到，你<br>可以考虑使用git fsck，找到丢失的对象的版本id，然后恢复即可。</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git fsck --lost-found</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/yauq44ykzfz14wy3ti4c7ale/image_1b665nqq41ju4l4318f0ave86d9.png" alt=""></p>
<hr>
<h2 id="本地分支"><a href="#本地分支" class="headerlink" title="本地分支"></a>本地分支</h2><hr>
<h3 id="1-分支概念"><a href="#1-分支概念" class="headerlink" title="1.分支概念"></a>1.分支概念</h3><p>提交记录串成的时间线，默认初始创建的分支(时间线) —— <strong>master分支</strong>，<br>如果不切换到其他分支上，每次commit生成的快照都会串在这条分支上！<br>另外还有个 —— <strong>HEAD指针</strong>，该指针指向<strong>正在工作的本地分支</strong>，前面的版<br>本回退其实修改的就是这个<strong>HEAD指针的指向</strong>！</p>
<p>比如：在master分支上执行四次commit，分支的状态图如下</p>
<p><img src="http://static.zybuluo.com/coder-pig/xoz9ua7lctzieenhofjz0b2g/image_1b3s9l8qnp341lt1bmlnr0qqpm.png" alt=""></p>
<p>不难发现这样的规律：</p>
<blockquote>
<ul>
<li>每次commit，<strong>master</strong>都会向前移动一步，指向最新的提交</li>
<li><strong>HEAD则指向正在工作的本地分支</strong>，而git reset修改的就是HEAD指针的指向！</li>
</ul>
</blockquote>
<hr>
<h3 id="2-创建其他分支的原因"><a href="#2-创建其他分支的原因" class="headerlink" title="2.创建其他分支的原因"></a>2.创建其他分支的原因</h3><p>通过两个场景来体会创建其他分支的必要性</p>
<blockquote>
<ul>
<li><strong>场景一</strong>：<br>项目一般都是一步步迭代升级的，有大版本和小版本的更新：大版本一般是改<br>头换面的更新，比如UI大改，架构大改，版本是：v2.0.0这样；小版本的更新<br>一般是UI小改，Bug修复优化等，版本是：v2.0.11这样；<br>只有一条master分支，意味着：你的分支线会非常非常的长,假如你已经发布<br>到了第二个大版本，然后用户反馈第一个版本有很严重的BUG，这时候想切回<br>第一个版本改BUG，然后改完BUG切回第二个大版本，想想够呛。</li>
<li><strong>场景二</strong>：<br>只有一个master分支的话，假如某次提交冲突了，而这个冲突很难解决或者<br>解决不了， 那么，那个整个开发就卡住在这里了，无法继续向后进行了！</li>
</ul>
</blockquote>
<hr>
<h3 id="3-一个最简单实用的分支管理策略"><a href="#3-一个最简单实用的分支管理策略" class="headerlink" title="3.一个最简单实用的分支管理策略"></a>3.一个最简单实用的分支管理策略</h3><p>为了解决只有一个master分支引起的问题，可以引入分支管理，最简单的一种策略如下：</p>
<blockquote>
<p>在<strong>master分支</strong>上开辟一个新的<strong>develop分支</strong>，然后我们根据功能或者业务，再在develop<br>分支上另外<strong>开辟其他分支</strong>，完成分支上的任务后，再将这个分支<strong>合并到develop分支</strong>上！<br>然后这个功能分支的任务也到此结束，可以删掉，而当发布正式版后，再把<strong>develop分支</strong><br>合并到<strong>master分支</strong>上。</p>
</blockquote>
<p><strong>master与develop</strong>分支都作为<strong>长期分支</strong>，而其他创建的分支作为<strong>临时性分支</strong>！<br>简述各个分支的划分：</p>
<ul>
<li><strong>master分支</strong>：可直接用于产品发布的代码，就是正式版的代码</li>
<li><strong>develop分支</strong>：日常开发用的分支，团队中的人都在这个分支上进行开发</li>
<li><strong>临时性分支</strong>：根据特定目的开辟的分支，包括<strong>功能(feature)分支</strong>，或者<strong>预发布(release)分支</strong>，<br>又或者是<strong>修复bug （fixbug）分支</strong>，当完成目的后，把该分支合并到develop分支，<br>然后删除 该分支，使得仓库中的常用分支始终只有：<strong>master和develop两个长期分支</strong>！</li>
</ul>
<hr>
<h3 id="4-分支创建与切换【git-branch】"><a href="#4-分支创建与切换【git-branch】" class="headerlink" title="4.分支创建与切换【git branch】"></a>4.分支创建与切换【git branch】</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch 分支名 # 创建分支</div><div class="line">git branch # 查看本地分支</div></pre></td></tr></table></figure>
<p>比如在master分支上创建develop分支，此时的分支状况如下：</p>
<p><img src="http://static.zybuluo.com/coder-pig/lec5ebbvc2it0ki346381xxx/image_1b3sa7qtm1fsb1k7c1i4714va1gdm1a.png" alt=""> <img src="http://static.zybuluo.com/coder-pig/ua6n2lu71yr1hhpve2aa6bkm/image_1b3sadeck1lur1tc71quhu8146g2h.png" alt=""></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git checkout 分支名 # 切换分支</div><div class="line">git checkout -b 分支名 # 创建分支同时切换到这个分支</div></pre></td></tr></table></figure>
<p>切换到develop分支后，改点东西，再commit，此时的分支状况如下：</p>
<p><img src="http://static.zybuluo.com/coder-pig/z1zr6ubmzua8j6cgfmep3fg8/image_1b3sacn2f1dpkmluqjp1rnk1i4g24.png" alt=""> <img src="http://static.zybuluo.com/coder-pig/ua6n2lu71yr1hhpve2aa6bkm/image_1b3sadeck1lur1tc71quhu8146g2h.png" alt=""></p>
<p>git checkout master 切回master分支，打开之前修改的文件，发现内容<br>并没有发生更改，因为刚刚的更改是在develop上提交的，而master上没有<br>变化，此时的分支状况如下：</p>
<p><img src="http://static.zybuluo.com/coder-pig/g39p7f81wntyt56hvz5zwi0f/image_1b3salka7upop7vgbo3ap9212u.png" alt=""></p>
<hr>
<h3 id="5-分支的合并【git-merge】-VS-【git-rebase】"><a href="#5-分支的合并【git-merge】-VS-【git-rebase】" class="headerlink" title="5.分支的合并【git merge】 VS 【git rebase】"></a>5.分支的合并【git merge】 VS 【git rebase】</h3><p>Git中，可以使用 <strong>git merge</strong> 和 <strong>git rebase</strong> 两个命令来进行分支的合并</p>
<p><strong>git merge合并分支</strong></p>
<p>合并的方式分为两种：<strong>快速合并</strong> 和 <strong>普通合并</strong>，两者的区别在于：<br>前者合并后看不出曾经做过合并，而后合并后的历史会有分支记录，如图：</p>
<p><strong>快速合并</strong>：<img src="http://static.zybuluo.com/coder-pig/9hfvfdpu6zhfaxixgmx7u9ft/image_1b3sc8eg11630efr1v1j19iaess3b.png" alt=""> <strong>普通合并</strong> ：<img src="http://static.zybuluo.com/coder-pig/i528n9ss429qcco9w83lzjoe/image_1b3sc922i2m8156vepn194m4pc3o.png" alt=""></p>
<p><strong>示例</strong>：</p>
<p><strong>快速合并</strong>，把develop分支合并到master分支上，来到master分支后，键入下述命令</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge develop</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/w07wsyt82uum7350jb78n5ua/image_1b3scaf6a10pigedu1dieu14jj45.png" alt=""> 打开文件：<img src="http://static.zybuluo.com/coder-pig/63gdbh7zq34vudi3q22e0lra/image_1b3scgil9p7dvu6ra6epr1cr94i.png" alt=""></p>
<p><strong>普通合并</strong>，切到develop分支下，修改note_2.txt的内容，再通过下述指令合并分支：<br>注：<strong>–no-ff参数表示禁用快速合并</strong>！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git merge --no-ff -m &quot;合并的信息(TAG)&quot; develop</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/wb1effb3mt3kedb91jfyn1op/image_1b3sev87i17jj12u5nlb15fd16if4v.png" alt=""> 分支线情况：<img src="http://static.zybuluo.com/coder-pig/1w8exedk67dxqiehz2nlv0mh/image_1b3sfp0kgo96qhm10fd1bspo65s.png" alt=""></p>
<p><strong>git reabse合并分支</strong></p>
<p><strong>rebase</strong>(衍合)，发现很多所谓的教程把这个东西写得太深奥了，其实并没有<br>那么复杂，只是这种合并会使得树整洁，易于跟踪，举个简单的例子来对比下<br>有一个项目由两个人同时开发， 当前远程仓库的提交记录是这样的：</p>
<p><img src="http://static.zybuluo.com/coder-pig/83cm3qx6f7d411gni666jedh/image_1b3v0c01cobcuok1eui1246109v9.png" alt=""></p>
<p>然后A和B各自开了一个条分支来完成相应功能，接着他们在自己的<br>分支上都做了多次的commit，此时两人的分别分支线是这样的：</p>
<p><img src="http://static.zybuluo.com/coder-pig/jozwgq7f1n87edfujx97aguz/image_1b3v0cs1s14co193d1oqhhjnlgpm.png" alt=""> &nbsp;&nbsp;<img src="http://static.zybuluo.com/coder-pig/en3mqvkchus3zkx6gj55r4uz/image_1b3v0de6a1t04inq1lke6d45rv13.png" alt=""></p>
<p>A先合并，再到B合并，这里我们假设两人做的是完全不关联的模块，合并没有冲突</p>
<p><strong>merge合并</strong></p>
<p><img src="http://static.zybuluo.com/coder-pig/h7sotxs56ck050ymd1ogr299/image_1b3v1cs8eah2t0l1aktnb51rim1g.png" alt=""></p>
<p><strong>rebase合并</strong></p>
<p><img src="http://static.zybuluo.com/coder-pig/oik0zyq6d6mokiprue255gwz/image_1b3v2if1j279173aujd14utnoi1t.png" alt=""></p>
<p>用法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git rebase 想合并到哪个分支的分支名</div></pre></td></tr></table></figure>
<hr>
<h3 id="6-解决合并冲突"><a href="#6-解决合并冲突" class="headerlink" title="6.解决合并冲突"></a>6.解决合并冲突</h3><p>在我们合并分支的时候，有时会遇到<strong>合并冲突</strong>，然后合并失败的问题，<br>此时需要我们先解决冲突后才能进行合并，个人开发倒很少会遇到，多人<br>开发的时候遇到<strong>合并冲突</strong>则是家常便饭。</p>
<p>一个最简单的例子，A和B在develop分支上开辟出两个分支来完成相关的<br>功能，A做完了，把自己的分支合并到develop分支，此时develop分支向前<br>移动了几次commit，接着B也完成了他的功能，想把自己分支合并到develop<br>分支，如果改动的文件和和A改动的文件相同的话，此时就会合并失败，<br>然后需要处理完冲突，才能够继续合并！简单模拟下这个例子，先试试merge！</p>
<p><strong>merge分支后处理冲突</strong></p>
<p><img src="http://static.zybuluo.com/coder-pig/9kjphgssfg5gcpz12frmju3r/image_1b5mvtj2t1duv6cjoe011s81je113.png" alt=""></p>
<p><img src="http://static.zybuluo.com/coder-pig/35qik3fh85uyy82upj7u6ekb/image_1b5mvub6l1t22qbgcai5cnrp1g.png" alt=""></p>
<p>打开冲突文件，然后处理冲突部分，保留什么代码你自己决定，处理完后把<br>&lt;&lt;&lt; 和 &gt;&gt;&gt; 这些去掉：</p>
<p><img src="http://static.zybuluo.com/coder-pig/efgwhpk5nf14smu58scgpg42/image_1b5n019ir1h861ggdr1n1bj1ppf1t.png" alt=""> 处理后：<img src="http://static.zybuluo.com/coder-pig/7y5i0sbg79pnzcmg8qf667xn/image_1b5n06fh0aii1hphjp01tkc152q2a.png" alt=""></p>
<p>然后add，然后commit即可，合并结束：</p>
<p><img src="http://static.zybuluo.com/coder-pig/8ot8sz1kqmllhggvnxdnkygt/image_1b5n08jfn1s40196vmj9n81i4f2n.png" alt=""></p>
<p> 此时的分支线：</p>
<p><img src="http://static.zybuluo.com/coder-pig/pjbzn298dl8nmgxghqhdrzsf/image_1b5n1tclj1n5m4dj1id3en81tp834.png" alt=""></p>
<p>接着试试</p>
<p><strong>rebase分支后处理冲突</strong></p>
<p>重新来一遍，然后把A直接merge到master，再切到B，rebase master，此时出现<br>合并冲突，这里有三个可选的操作：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git rebase --continue # 处理完冲突后，继续处理下一个补丁</div><div class="line">git rebase --abort # 放弃所有的冲突处理，恢复rebase前的情况</div><div class="line">git rebase --skip # 跳过当前的补丁，处理下一个补丁，不建议使用，补丁部分的commit会丢失！</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/94ktddch3e3h6ukhx595t562/image_1b5n26b541oeghg81ivtbj8166e3h.png" alt=""></p>
<p>好的，有三次补丁要处理，一个个来：</p>
<p><img src="http://static.zybuluo.com/coder-pig/xgszdy29hs1y4hg35rsv6ozw/image_1b5n2is9q1lf018oq1cjh1frcfvd3u.png" alt=""></p>
<p><img src="http://static.zybuluo.com/coder-pig/aj3p6dqg4bh4j3mon1khf2ny/image_1b5n2tv811t6jpf91groc071gm94b.png" alt=""> 处理后：<img src="http://static.zybuluo.com/coder-pig/7wzm4djuhw4zcck7msydnroq/image_1b5n2urelqbujh21ut1108q1mj54o.png" alt=""></p>
<p>接着git add 添加修改后的文件，git rebase –continue继续处理补丁：</p>
<p><img src="http://static.zybuluo.com/coder-pig/pqvsu7eeem6ag58xoturnt5u/image_1b5n35s3380l1efv1bj41g4g15275i.png" alt=""></p>
<p>接着重复之前的过程：</p>
<p><img src="http://static.zybuluo.com/coder-pig/frvg3icv2w0a9rv2bfwc818h/image_1b5n37tghj2c1vpu1v0e1bla1jj36c.png" alt=""></p>
<p><img src="http://static.zybuluo.com/coder-pig/mwfrec51yixo3gitb4q09nlg/image_1b5n3767u10i1mgro95nil1o9v5v.png" alt=""> 处理后：<img src="http://static.zybuluo.com/coder-pig/3qdbn1gn9vfcgm0qnzmi6ud0/image_1b5n390l3b2f1blh1i5bsfn1eam6p.png" alt=""></p>
<p><img src="http://static.zybuluo.com/coder-pig/dvmp8du4xf8x1xl6wp0a8vop/image_1b5nc4sdd5vd16s5dtqfp31giu76.png" alt=""></p>
<p>第三个补丁是与A分支无关联的改动，所以没有冲突，所以也就直接合并了！<br>如果合并中途出了什么差错可以<strong>git rebase –abort</strong> 恢复rebase前的状况！</p>
<p>最后看下分支线会发现是一条直线，这也是用rebase合并分支的优点：</p>
<p><img src="http://static.zybuluo.com/coder-pig/iftto9czf0yw0mch18p12cs5/image_1b5nckg791fdfv9i1ata19vb161k7j.png" alt=""></p>
<p><strong>附上栗子，可以自己试试</strong>：<a href="http://static.zybuluo.com/coder-pig/i528n9ss429qcco9w83lzjoe/image_1b3sc922i2m8156vepn194m4pc3o.png" target="_blank" rel="external">GitTest.7z</a></p>
<hr>
<h3 id="7-删除分支"><a href="#7-删除分支" class="headerlink" title="7.删除分支"></a>7.删除分支</h3><p>对于合并完的分支，基本都没什么作用了，可以使用下述命令删除：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git branch -d 分支名 # 删除分支，分支上有未提交更改是不能删除的</div><div class="line">git branch -D 分支名 # 强行删除分支，尽管这个分支上有未提交的更改</div></pre></td></tr></table></figure>
<hr>
<h3 id="8-恢复误删分支"><a href="#8-恢复误删分支" class="headerlink" title="8.恢复误删分支"></a>8.恢复误删分支</h3><p>两步，找出被删除分支的最新commit的版本号，然后恢复分支</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git log --branches=&quot;被删除的分支名&quot; # 找到被删分支最新的commitb版本号</div><div class="line">git branch 分支名 版本号(前七位即可) # 恢复被删分支</div></pre></td></tr></table></figure>
<hr>
<h3 id="9-切换分支时保存未commit的更改【git-stash】"><a href="#9-切换分支时保存未commit的更改【git-stash】" class="headerlink" title="9.切换分支时保存未commit的更改【git stash】"></a>9.切换分支时保存未commit的更改【git stash】</h3><p>有时我们可能在某个分支上正编写着代码，然后有一些突发的情况，需要<br>我们暂时切换到其他分支上，比如要紧急修复bug，或者切换分支给同事<br>review代码，此时如果直接切换分支是会提示切换失败的，因为这个分支<br>上做的更改还没有提交，你可以直接add后commit，然后再切换，不过我们<br>习惯写完某个功能再提交，我们想：</p>
<blockquote>
<p><strong>先暂存这个分支上的改动</strong>，切去其他分支上搞完事，然后回来继续<br>继续在之前的改动上写代码。</p>
</blockquote>
<p>那么可以使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash # 保存当前的改动</div></pre></td></tr></table></figure>
<p>然后放心的切换分支，然后再切换回来，接着使用：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash apply #　恢复保存改动</div></pre></td></tr></table></figure>
<p>另外有一点一定要注意！！！可以<strong>stash多个改动</strong>！！如果你切换<br>到另一个分支又stash了，然后切换回来stash apply是恢复成另一个<br>分支的stash！！！</p>
<p>如果你这样stash了多次的话，我建议你先键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash list # 查看stash列表</div></pre></td></tr></table></figure>
<p>找到自己想恢复的那个</p>
<p><img src="http://static.zybuluo.com/coder-pig/28e3o8beoycmkxnj8mt37tbm/image_1b5ndgvo78hn1ufm1usan3ttqn80.png" alt=""></p>
<p>比如我这里恢复的应该是netword上的stash，而第一个stash是devlop上的<br>直接git stash apply恢复的就是这个，然而恢复的应该是network的那个stash：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git stash apply stash@&#123;1&#125;</div></pre></td></tr></table></figure>
<p>就是这样，按自己需要恢复即可！</p>
<hr>
<h3 id="10-分支重命名"><a href="#10-分支重命名" class="headerlink" title="10.分支重命名"></a>10.分支重命名</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -m 老分支名 新分支名 # 分支重命名</div></pre></td></tr></table></figure>
<hr>
<h2 id="远程仓库与远程分支"><a href="#远程仓库与远程分支" class="headerlink" title="远程仓库与远程分支"></a>远程仓库与远程分支</h2><hr>
<h3 id="1-远程仓库简述"><a href="#1-远程仓库简述" class="headerlink" title="1.远程仓库简述"></a>1.远程仓库简述</h3><p>用于代码托管，可以自己搭建远程仓库，或者选择专业的代码托管平台：<br>自己搭建的好处有：可控，内网安全，可以做一些定制，比如集成编译，IM等，<br>当然，肯定是需要一些学习成本的，(PS：我厂就是自己搭的Gitlab)</p>
<p>常见的代码托管平台(自己搜关键字去~)：</p>
<p>Github，Git@OSC，GitCafe，GitLab，coding.net，gitc，BitBucket，Geakit，Douban CODE</p>
<hr>
<h3 id="2-推送本地仓库到远程仓库【git-push】"><a href="#2-推送本地仓库到远程仓库【git-push】" class="headerlink" title="2.推送本地仓库到远程仓库【git push】"></a>2.推送本地仓库到远程仓库【git push】</h3><p>首先建立好与本地仓库同名的远程仓库，然后复制下远程仓库的地址，比如：</p>
<p><img src="http://static.zybuluo.com/coder-pig/mfl1gm9yvvuahuuknmfraauo/5.png" alt=""></p>
<p>键入下述命令关联本地与远程仓库</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git remote add origin 远程仓库地址</div></pre></td></tr></table></figure>
<p>可以键入下述命令可查看远程仓库状况</p>
<p><img src="http://static.zybuluo.com/coder-pig/a5k02j4j4g7vr6ofcoq29gy4/9.png" alt=""></p>
<p>接着把本地仓库推送到远程仓库，这里的 <strong>-u参数</strong> 作为第一次提交使用，<br>作用是把本地master分支和远程master分支关联起来(设置默认远程主机)，<br>后续提交不需要这个参数！</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push -u origin master</div></pre></td></tr></table></figure>
<p><img src="http://static.zybuluo.com/coder-pig/lbt7d5i6ix5fud5n9n3lrpwv/11.png" alt=""></p>
<p>另外，如果想修改远程仓库地址，可键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">git remote set-url origin 远程仓库地址</div><div class="line"></div><div class="line"># 也可以先删除origin后再添加</div><div class="line"></div><div class="line">git remote rm origin    # 删除仓库关联</div><div class="line">git remote add origin 远程仓库地址 # 添加仓库关联</div></pre></td></tr></table></figure>
<p>或直接修改.git文件夹中的config文件，直接替换圈住位置</p>
<p><img src="http://static.zybuluo.com/coder-pig/sde3mzriyzgvgjwiicpx259b/image_1b5q6tah81u1lm01i5116bpfpg1b.png" alt=""></p>
<p>还要说明一点，<strong>origin</strong> 并不是固定的东西，只是后面<strong>仓库地址</strong>的一个 <strong>别名</strong>！！<br>可以写成其他的东西，然后你也可以设置多个仓库关联，用不同的别名标志，比如：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git remote add github https://github.com/coder-pig/SimpleTea.git</div><div class="line">git remote add osc git@git.oschina.net:coder-pig/SimpleTea.git</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-克隆远程仓库【git-clone】"><a href="#3-克隆远程仓库【git-clone】" class="headerlink" title="3.克隆远程仓库【git clone】"></a>3.克隆远程仓库【git clone】</h3><p>把项目推送到远程仓库后，其他开发者就可以把项目clone到本地</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">git clone 仓库地址 # 克隆项目到当前文件夹下</div><div class="line">git clone 仓库地址 目录名 # 克隆项目到特定目录下</div></pre></td></tr></table></figure>
<hr>
<h3 id="4-同步远程仓库更新【git-fetch】VS-【git-pull】"><a href="#4-同步远程仓库更新【git-fetch】VS-【git-pull】" class="headerlink" title="4.同步远程仓库更新【git fetch】VS 【git pull】"></a>4.同步远程仓库更新【git fetch】VS 【git pull】</h3><p>关于获取远程服务器更新的方式有两种，他们分别是fetch和pull，<br>尽管都可以获取远程服务器更新，但是两者却又是不一样的。</p>
<p><strong>git fetch</strong>：</p>
<p>仅仅只是从远处服务器获取到最新版本到本地，假如你不去<strong>合并(merge)</strong><br>的话，本地工作空间是不会发生变化的！比如：<br>我们在Github上创建一个README.md文件，然后调 git fetch 去获取远程<br>仓库的更新。</p>
<p><img src="http://static.zybuluo.com/coder-pig/8gp8t5e7997fz56p61lr5pw1/2.png" alt=""></p>
<p><strong>git pull</strong>：</p>
<p>一步到位，或者说：<strong>pull = fetch + merge</strong>，比如：同样修改Github上的<br>README.md 文件，然后git pull 同步远程仓库的更新</p>
<p><img src="http://static.zybuluo.com/coder-pig/se34nr7mn5veca98trosy4hx/3.png" alt=""></p>
<p>区别显而易见，实际开发中，使用git fetch会更安全一些，毕竟merge的时候<br>我们可以查看更新的情况，再决定是否进行合并，当然看实际需要吧！</p>
<hr>
<h3 id="5-推送本地分支到远程仓库"><a href="#5-推送本地分支到远程仓库" class="headerlink" title="5.推送本地分支到远程仓库"></a>5.推送本地分支到远程仓库</h3><p>按照前面所讲，在本地开辟分支来完成某些工作，本地提交了多次后，<br>你想把分支推送到远程仓库，此时远程仓库并没有这个分支，你可以：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin 分支名 # 推送本地分支的内容到远程分支</div></pre></td></tr></table></figure>
<hr>
<h3 id="6-查看远程分支"><a href="#6-查看远程分支" class="headerlink" title="6.查看远程分支"></a>6.查看远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git branch -r # 查看所有分支</div></pre></td></tr></table></figure>
<hr>
<h3 id="7-拉取远程分支到本地仓库"><a href="#7-拉取远程分支到本地仓库" class="headerlink" title="7.拉取远程分支到本地仓库"></a>7.拉取远程分支到本地仓库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">git checkout -b 本地分支 远程分支 # 会在本地新建分支，并自动切换到该分支</div><div class="line">git fetch origin 远程分支:本地分支 # 会在本地新建分支，但不会自动切换，还需checkout</div><div class="line">git branch --set-upstream 本地分支 远程分支 # 建立本地分支与远程分支的链接</div></pre></td></tr></table></figure>
<hr>
<h3 id="8-删除远程分支"><a href="#8-删除远程分支" class="headerlink" title="8.删除远程分支"></a>8.删除远程分支</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">git push origin :分支名 # 就是前面的本地分支名改成一个问号而已</div></pre></td></tr></table></figure>
<hr>
<h3 id="9-重命名远程分支"><a href="#9-重命名远程分支" class="headerlink" title="9.重命名远程分支"></a>9.重命名远程分支</h3><p>先删除远程分支，然后重命名本地分支，接着再Push到远程仓库</p>
<hr>
<h3 id="10-为项目添加SSH-Key免去提交输入账号密码的麻烦"><a href="#10-为项目添加SSH-Key免去提交输入账号密码的麻烦" class="headerlink" title="10.为项目添加SSH Key免去提交输入账号密码的麻烦"></a>10.为项目添加SSH Key免去提交输入账号密码的麻烦</h3><p>不知道细心的你有没有发现，仓库地址除了Https外，还有一个SSH，<br>这里我们简单介绍下两者的区别，<strong>第一点</strong>：使用Https url可以任意克隆<br>Github上的项目；而是用SSH url克隆的话，你必须是项目的拥有者或<br>管理员，而且还要添加SSH Key，否则会无法克隆。<strong>还有一点</strong>是，<br>Https每次push都需要输入用户名和密码，而使用SSH则不需要输入<br>用户名如果配置SSH Key时设置了密码，则需要输入密码，否则直接<br>git push就可以了！</p>
<p>另外，SSH，Secure shell(安全外壳协议)，专为远程登陆会话<br>与其他网络服务提供安全性的协议，而SSH传输的数据是可以经过压缩的，<br>可以加快传输的速度，出于安全性与速度，我们优先考虑使用SSH协议，<br>而SSH的安全验证规则又分为<strong>基于密码</strong>和<strong>基于密钥</strong>两种！<br>我们这里用的是基于第二种的，即在本地创建一对密钥，<br><strong>公钥(id_rsa.pub)</strong>和<strong>私钥(id_rsa)</strong>,然后把公钥的内容贴到<br>Github账号的ssh keys中，这样就建立了本地和远程的认证关系，<br>当我们再push到远程仓库，会将你本地的公共密钥与服务器的进行匹配，<br>如果一致验证通过直接推送更新！</p>
<p>下面我们来建立ssh key，首先来到电脑的根目录下，这里假定我们没<br>创建过SSH key：</p>
<p><img src="http://static.zybuluo.com/coder-pig/6qf9awv1h7uyuw9wghqybbd4/1.png" alt=""></p>
<p>执行完ssh-keygen那个指令后，后面依次要你输入文件名，<br>直接回车会生成两个默认的秘钥文件，接着提示输入密码，<br>直接回车，如果这里你输入密码了的话，那么push的时候<br>你还是需要输入密码，接着又输多一次密码，同样回车，<br>然后出现最下面的这串东西就说明ssh key已经创建成功了！</p>
<p>我们接着可以用编辑器打开id_rsa.pub文件或者键入:</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">clip &lt;id_rsa.pub</div></pre></td></tr></table></figure>
<p>复制文件内容，然后打开Github，点击你的头像，选择：<strong>Settings</strong>，<br>然后点击左侧<strong>SSH Keys</strong>,然后<strong>New SSH Key</strong></p>
<p><img src="http://static.zybuluo.com/coder-pig/urp4ty4xevoznz57jpwahksf/2.png" alt=""></p>
<p>然后Github会给你发来一个提示创建了一个新ssh key的邮件，<br>无视就好，接下来我们可以键入：<strong>ssh -T git@github.com</strong>，<br>然后如果你上面设置过密码则需要输入密码，<br>否则直接输入yes然后一直按回车就好！，最后出现Hi xxx那句话<br>就说明ssh key配置成功了！</p>
<p><img src="http://static.zybuluo.com/coder-pig/27ok7cje6g4l8ww030lxg0bk/4.png" alt=""></p>
<p>PS：其他远程仓库配置方法与此类同，<br>内容参考自：<a href="http://static.zybuluo.com/coder-pig/get64rj0pj9n68icaogq9mzn/75062926.png" target="_blank" rel="external">https://help.github.com/articles/generating-an-ssh-key/</a></p>
<hr>
<h3 id="附1：Github客户端"><a href="#附1：Github客户端" class="headerlink" title="附1：Github客户端"></a>附1：Github客户端</h3><p>其实，安装好Git后，就一有一个<strong>GitGui</strong>的东东了，就可以直接<br>用有用户界面的Git来做版本管理的工作了，而Github客户端则是<br>Github给我们提供的一个专门用来管理Github项目的一个工具而已。<br>比如，假如你装了Github客户端，在Clone项目的时候，你只需点击：</p>
<p><img src="http://static.zybuluo.com/coder-pig/d5ptqcii4ekq5ajreord5d42/1.png" alt=""></p>
<p>就能直接把项目clone下来，就是一些Git操作的图形化罢了，首先来到下面的链接<br>下载Github客户端：<a href="http://static.zybuluo.com/coder-pig/mwp8d0uv9592n4qvdr95mgqh/image_1b3n9k2jt1npgkk11tmkp1o18vom.png" target="_blank" rel="external">https://desktop.github.com/</a><br>文件很小，后面点击运行文件后，他还要在线下载安装，100多m，<br>然后傻瓜式安装，安装完成后，会自动打开Github客户端，然后<br>使用你的Github账号登陆，接着他会默认为你创建SSH Key信息，<br>接着的你自己摸索了！</p>
<p>这里另外补充一点，就是<strong>win 8.1装Github客户端</strong>的问题，<br>昨晚安装的时候一直报这个错误：</p>
<p><img src="http://static.zybuluo.com/coder-pig/yesk2817tua335yjk7890hqh/2.png" alt=""></p>
<p>直接，<strong>win + x</strong>，选择”<strong>命令行提示符(管理员)</strong>“，执行以下下面的这个指令：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">%SYSTEMROOT%\SYSTEM32\REGSVR32.EXE %SYSTEMROOT%\SYSTEM32\WUAUENG.DLL</div></pre></td></tr></table></figure>
<p>然后再点击Github的安装程序，等待安装完成即可，下载并不需梯子。</p>
<hr>
<h3 id="附2：删除Git仓库"><a href="#附2：删除Git仓库" class="headerlink" title="附2：删除Git仓库"></a>附2：删除Git仓库</h3><p>点击进入你的仓库，点击Setting，拉到最后：</p>
<p><img src="http://static.zybuluo.com/coder-pig/njb1o9whzkfhyxwjpvjgbc1t/2.png" alt=""></p>
<p>点击Delete this repository</p>
<p><img src="http://static.zybuluo.com/coder-pig/7i9sl0f156sq54wwqpxdasyu/1.png" alt=""></p>
<p>弹出的对话框中输入要删除的仓库名称，接着点击删除</p>
<p><img src="http://static.zybuluo.com/coder-pig/ukn3px7yvdtvfen0u4okciqw/3.png" alt=""></p>
<hr>
<h3 id="附3：为开源项目贡献代码"><a href="#附3：为开源项目贡献代码" class="headerlink" title="附3：为开源项目贡献代码"></a>附3：为开源项目贡献代码</h3><p>你可以Clone别人的开源项目，在看别人代码的时候，你觉得作者有<br>某些地方写得不好，写错，或者你有更好的想法，你在本地修改后，<br>想把修改push推送到开源项目上，想法很好，但是你不是项目的拥<br>有着和参与者，是无法推送更改的！！！这样是为了<br>避免熊孩子，毕竟熊孩子无处不在，参与开源项目的方法有两种：</p>
<p><strong>第一种方法</strong>：<br>是让作者把你加为写作者，添加协作者流程：点击仓库的<strong>Settings</strong><br>–&gt;<strong>Collaborators</strong>然后输入想添加的人的用户名或者邮箱，点击<br>添加即可。</p>
<p><strong>第二种方法</strong>：<br>点击<strong>Fork</strong>按钮，把这个项目<strong>fork</strong>到自己的账号下，然后<strong>Clone</strong><br>到本地，然后做你想做的修改，<strong>commit提交</strong>，然后<strong>push</strong>到自己账<br>号里的仓库，然后打开开源项目，点击<img src="http://static.zybuluo.com/coder-pig/bes1ohwoxqdszhkxu0x87hhf/3.png" alt="">，然后新建一个<br><strong>pull request</strong>，接着设置自己的仓库为<strong>源仓库</strong>，设置<strong>源分支</strong>，<br><strong>目标仓库</strong>与<strong>目标分支</strong>，然后还有pull request的标题和描述信息，<br>填写完毕后，确定，这个时候开源项目的作者就会收到一个pull<br>request的请求，由他来进行审核，作者审查完代码觉得没问题<br>的话，他可以点击一下merge按钮即可将这个pull request合并<br>到自己的项目中，假如作者发现了你代码中还有些bug，他可以<br>通过Pull Request跟你说明，要修复了xxBUG才允许合并，那么<br>你再修改下BUG，提交，更改后的提交会进入Pull Request，<br>然后作者再审核这样！</p>
<p>PS:假如作者不关闭或者merge你的这个Pull Request，你可以一直<br>commit骚扰主项目…( ╯□╰ )</p>
<hr>
<h2 id="Git工作流"><a href="#Git工作流" class="headerlink" title="Git工作流"></a>Git工作流</h2><p>关于Git工作流，看到一篇图文并茂很好的文章，就不重复造轮子了，<br>此处只是做下对应工作流的简述，详情见：<a href="https://github.com/oldratlee/translations/tree/master/git-workflows-and-tutorials" target="_blank" rel="external">Git Workflows and Tutorials</a></p>
<hr>
<h3 id="1-集中式工作流"><a href="#1-集中式工作流" class="headerlink" title="1.集中式工作流"></a>1.集中式工作流</h3><p>类似于SVN，不过只有一条master分支，然后一群人就在这条分支上嗨，比如有小A和小B：<br>(冲突解决参照上面的套路)</p>
<blockquote>
<ul>
<li>1.项目管理者初始化仓库，然后推到远程仓库</li>
<li>2.其他人克隆远程仓库项目到本地</li>
<li>3.小A和小B完成各自的工作</li>
<li>4.小A先完成了，git push origin master 把代码推送到远程仓库</li>
<li>5.小B后完成了，此时推送代码到远程仓库，出现文件修改冲突</li>
<li>6.小B需要先解决冲突，git pull –rebase origin master，然后rebase慢慢玩</li>
<li>7.小B把冲突解决后，git push origin master 把代码推送到远程仓库</li>
</ul>
</blockquote>
<hr>
<h3 id="2-功能分支工作流"><a href="#2-功能分支工作流" class="headerlink" title="2.功能分支工作流"></a>2.功能分支工作流</h3><p>和集中式分部流相比只是分支再不是只有master，而是根据功能开辟新的分支而已，示例：<br>注：这里的仓库管理者是拥有仓库管理权限的人</p>
<blockquote>
<ul>
<li>1.小A要开发新功能，git branch -b new-feature 开辟新分支</li>
<li>2.小A在new-feature上新功能相关的编写，他可以这个分支推到远程仓库</li>
<li>3.功能完成后，发起请求pull request(合并请求)，把new-feature合并到master分支</li>
<li>4.仓库管理员可以看到小A的更改，可以进行一些评注，让小A做某些更改，<br>然后再发起pull request，或者把pull request拉到本地自行修改。</li>
<li>5.仓库管理员觉得可以了，合并分支到master上，然后把new-feature分支删掉</li>
</ul>
</blockquote>
<hr>
<h3 id="3-Gitflow工作流"><a href="#3-Gitflow工作流" class="headerlink" title="3.Gitflow工作流"></a>3.Gitflow工作流</h3><p>其实就是功能分支工作流做了一些规范而已，大概流程参见上面Git分支里的：<br>一个最简单实用的分支管理策略。</p>
<hr>
<h3 id="4-Forking工作流"><a href="#4-Forking工作流" class="headerlink" title="4.Forking工作流"></a>4.Forking工作流</h3><p>分布式工作流，每个开发者都拥有自己独立的仓库，和上面的附3：为开源项目贡献代码<br>套路类似，把项目fork到自己的远程仓库，完成相应更改，然后pull request到源仓库，<br>源仓库管理者可以决定是否合并。</p>
<hr>
<h3 id="5-Pull-Request工作流"><a href="#5-Pull-Request工作流" class="headerlink" title="5.Pull Request工作流"></a>5.Pull Request工作流</h3><p>和Forking工作流类似，<strong>Pull Requests</strong>是Bitbucket上方便开发者之间协作的功能</p>
<hr>
<h2 id="查缺补漏"><a href="#查缺补漏" class="headerlink" title="查缺补漏"></a>查缺补漏</h2><p>一些高级技巧，工具，插件安利</p>
<hr>
<h3 id="1-巨好用的Git图形化工具SourceTree"><a href="#1-巨好用的Git图形化工具SourceTree" class="headerlink" title="1.巨好用的Git图形化工具SourceTree"></a>1.巨好用的Git图形化工具SourceTree</h3><p>命令行虽酷炫可装逼，但是有时用图形化工具还是能提高我们不少效率的，<br>如题，<strong>SourceTree</strong>，官网下载地址：<a href="https://www.sourcetreeapp.com/" target="_blank" rel="external">https://www.sourcetreeapp.com/</a></p>
<hr>
<h3 id="2-把提交的commit从一个分支放到另一个分支【git-cherry-pick】"><a href="#2-把提交的commit从一个分支放到另一个分支【git-cherry-pick】" class="headerlink" title="2.把提交的commit从一个分支放到另一个分支【git cherry-pick】"></a>2.把提交的commit从一个分支放到另一个分支【git cherry-pick】</h3><p>有时你可能需要把某个分支上的commit放到另一个分支上，这个时候可以<br>使用<strong>cherry-pick</strong>，比如有下面这样两个分支：</p>
<p><strong>master分支</strong>：A -&gt; B -&gt; C<br><strong>feature分支</strong>：a -&gt; b </p>
<p>现在想把feature上的b，放到master的C后，可以这样：</p>
<ul>
<li><strong>Step 1</strong>：切换到feature分支上，<strong>git log</strong>拿到b commit的<strong>版本号</strong>(SHA1)</li>
<li><strong>Step 2</strong>：切换到master分支，键入：<strong>git cherry-pick 版本号</strong></li>
</ul>
<p><img src="http://static.zybuluo.com/coder-pig/w3nggwbp1c9zzazj2kshbmsp/image_1bp10e8cs1vgt1ampiskpo7gud3c.png" alt=""></p>
<p>出现上面这种情况的话说明出现冲突了，处理冲突后，git add 和 git commit 走一波<br>即可。</p>
<hr>
<p>待续…(最近更新：2017.9.5)</p>
<p>编辑日志：</p>
<ul>
<li>2017.5.3： 添加.gitignore注意事项</li>
<li>2017.9.5： 排版与内容优化，勘误，新增查缺补漏</li>
</ul>
]]></content>
      
        <categories>
            
            <category> 版本管理 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Git </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hexo搭建个人博客相关]]></title>
      <url>/2017/09/12/Hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E7%9B%B8%E5%85%B3/</url>
      <content type="html"><![CDATA[<h2 id="环境安装与配置"><a href="#环境安装与配置" class="headerlink" title="环境安装与配置"></a>环境安装与配置</h2><hr>
<h3 id="1-安装Node-js与Git"><a href="#1-安装Node-js与Git" class="headerlink" title="1.安装Node.js与Git"></a>1.安装Node.js与Git</h3><p><strong>「Windows」</strong></p>
<blockquote>
<ul>
<li>下载安装 <a href="https://nodejs.org/en/" target="_blank" rel="external"><strong>Node.js</strong></a>：用于创建hexo博客框架</li>
<li>下载安装 <a href="https://git-scm.com/download" target="_blank" rel="external"><strong>Git客户端</strong></a>：用于提交hexo内容到Github</li>
</ul>
</blockquote>
<p><strong>「Mac」</strong></p>
<blockquote>
<ul>
<li>使用 <strong>brewhome</strong> 安装 <strong>Node.js</strong>：<strong>brew install node</strong></li>
<li>安装 <strong>git</strong>：<strong>sudo brew install git</strong></li>
</ul>
</blockquote>
<p><strong>配置SSH Key</strong>：这个是把博客发布到Github的时候要用到，很简单直接贴<br>命令，详细步骤可见：<a href="http://blog.csdn.net/coder_pig/article/details/54346867" target="_blank" rel="external">http://blog.csdn.net/coder_pig/article/details/54346867</a></p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mkdir ~./ssh</div><div class="line">cd ~./ssh</div><div class="line">ssh-keygen -t rsa -C &quot;xxx@xxx.xxx&quot;</div><div class="line">cat id_rsa.pub  # 也可以直接打开文件拷贝</div></pre></td></tr></table></figure>
<p>然后贴到自己Github的 <strong>Setting</strong> -&gt; <strong>SSH keys</strong> 即可。</p>
<hr>
<h3 id="2-安装Hexo"><a href="#2-安装Hexo" class="headerlink" title="2.安装Hexo"></a>2.安装Hexo</h3><p>前两步都安装成功的话，新建一个文件夹用来放博客相关的东西，<br>Windows右键 <strong>Git bash</strong> 打开命令行，Mac打开终端，cd到所<br>创建的文件目录下，键入：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo</div></pre></td></tr></table></figure>
<p><strong>安装 Hexo</strong>，接着初始化建立网站的所需文件</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo init</div></pre></td></tr></table></figure>
<p><strong>安装依赖包</strong>：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install</div></pre></td></tr></table></figure>
<p>接着就可以使用hexo相关的一些命令了：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo g #hexo generate，用于生成静态文件</div><div class="line">hexo clean #清除生成的静态文件</div><div class="line">hexo s #hexo server，用于启动服务器，主要用来本地预览</div><div class="line">hexo d #hexo deploy，用于将本地文件发布到github上</div><div class="line">hexo n #hexo new，用于新建一篇文章</div><div class="line">hexo v #hexo version，查看Hexo的版本</div><div class="line">hexo h #hexo help，查看帮助</div></pre></td></tr></table></figure>
<hr>
<h3 id="3-创建Github仓库并部署文件到仓库"><a href="#3-创建Github仓库并部署文件到仓库" class="headerlink" title="3.创建Github仓库并部署文件到仓库"></a>3.创建Github仓库并部署文件到仓库</h3><p>如无意外，使用上面的 <strong>hexo g</strong> 和 <strong>hexo s</strong> 后打开对应的<br>本地网址就可以，就能预览博客效果了</p>
<p><img src="http://static.zybuluo.com/coder-pig/ew5ohm6648rrx7aq9wkhwr61/9AA3652A-D977-4BE7-8051-2CDE975D52D6.png" alt=""></p>
<p>接着就要把我们的博客部署到Github上了，流程如下：</p>
<ul>
<li>在Github上创建一个：<strong>Github用户名.github.io</strong> 的仓库，比如：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">coder-pig.github.io</div></pre></td></tr></table></figure>
<ul>
<li>打开hexo目录下的：<strong>_config.yml</strong> 文件，滚到最后<strong>deploy</strong>结点处，添加：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">deploy:</div><div class="line">    type: git</div><div class="line">    repo: git@github.com:coder-pig/coder-pig.github.io.git</div><div class="line">    branch: master</div></pre></td></tr></table></figure>
<ul>
<li>如果hexo d的时候出现：<strong>ERROR Deployer not found: git</strong>，可键入：</li>
</ul>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<ul>
<li>然后在执行hexo d,如无意外，此时打开coder-pig.github.io就可以看到自己的网站了。</li>
</ul>
<hr>
<h2 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h2><p>关于Hexo的配置，大部分都是通用的，找到对应Hexo主题的网站或者Github<br>一般都是有介绍的，比如改标题啊，名字啊，之类的，这里就不再复述了。<br>Hexo的主题还是蛮多的，可以到这里选择对应的主题，按流程配置下即可：<br><strong>Hexo主题选择</strong>：<a href="https://hexo.io/themes/" target="_blank" rel="external">https://hexo.io/themes/</a><br>比如笔者用的就是：<a href="https://github.com/raytaylorlin/hexo-theme-raytaylorism" target="_blank" rel="external">https://github.com/raytaylorlin/hexo-theme-raytaylorism</a></p>
<hr>
<h2 id="MD文档头部模板"><a href="#MD文档头部模板" class="headerlink" title="MD文档头部模板"></a>MD文档头部模板</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">title: Hexo搭建个人博客相关</div><div class="line">categories: 博客搭建</div><div class="line">tags: Hexo</div><div class="line">date: 2016.11.28 13:22:21</div></pre></td></tr></table></figure>
<hr>
]]></content>
      
        <categories>
            
            <category> 博客搭建 </category>
            
        </categories>
        
        
        <tags>
            
            <tag> Hexo </tag>
            
        </tags>
        
    </entry>
    
  
  
</search>
